from PyQt5.QtWidgets import *
from UI import *
from UI.Update import *

class GUI(QMainWindow):
	def __init__(self):
		super().__init__()
		self.mainWidget = QWidget()
		self.wnlWidget = QWidget()
		self.wnlWidget.isClosed = True
		self.setupUI()
		# 布局
		self.generalLayout()
		self.outputText()  # 左上、左下
		self.astronomyCalculate()  # 中上
		self.buWuXing()  # 中中、中下
		self.tools()  # 右上
		self.buZhongShuo()  # 右下

		QMetaObject.connectSlotsByName(self)
		self.setStyleSheet("QPushButton {font:12px}"
		                   "QGroupBox {font:18px}"
		                   "QListWidget {font: 12px; padding: 2px} "
		                   "QCheckBox::indicator {width:14px; height:14px}"
		                   "QCheckBox {padding-top:2px; padding-bottom:2px}")

	def setupUI(self):
		pe = QPalette()
		pe.setColor(QPalette.Window, QColor(245, 245, 245))
		self.setPalette(pe)
		self.setWindowTitle("历法计算")
		self.setMaximumSize(self.width(), self.height())
		self.setWindowOpacity(0.95)
		self.setCentralWidget(self.mainWidget)
		self.show()


	''' 布局 '''
	def generalLayout(self):
		''' 总体布局：左中右（上下）'''
		self.layout = QHBoxLayout(self)
		self.layLeft = QVBoxLayout()
		self.layCenter = QVBoxLayout()
		self.layRight = QVBoxLayout()
		self.layout.addLayout(self.layLeft, 0)
		self.layout.addLayout(self.layCenter, 1)
		self.layout.addLayout(self.layRight, 2)
		self.layout.setContentsMargins(8, 6, 3, 10)
		self.mainWidget.setLayout(self.layout)

	def outputText(self):
		# 左上
		self.edit = TextEdit()
		self.layLeft.addWidget(self.edit, 0)
		self.edit.setFixedSize(320, 570)
		self.edit.setStyleSheet("QTextEdit{font:12px; font:family}")
		self.edit.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
		self.edit.setLineWrapMode(QTextEdit.NoWrap)  # 不自动换行
		# 左下
		self.layLeftBottom = QHBoxLayout()
		self.layLeft.addLayout(self.layLeftBottom, 1)
		self.layLeftBottom.setContentsMargins(0, 0, 0, 0)  # 布局边缘（左，上，右，下）
		self.layLeftBottom.setSpacing(3)
		self.labHint = QLabel("输出文本框")
		self.labHint.setContentsMargins(6, 0, 8, 0)
		self.layLeftBottom.addWidget(self.labHint)

		self.layLeftBottom.addStretch()
		self.btnUpdate = PushButton("检查更新")
		self.layLeftBottom.addWidget(self.btnUpdate)
		self.btnUpdate.clicked.connect(lambda: checkUpdate(self))
		self.btnUpdate.setMaximumWidth(56)
		self.btnInfo = PushButton("输入说明")
		self.btnInfo.clicked.connect(lambda: self.edit.append('\t    输入输出说明' \
         '\n日期输入格式：year/month/day hour:minute;second' \
         '\n\t只输入year默认为year/1/1' \
         '\n\t只输入year/month默认为year/month/1' \
         '\n\t以“-”号表示公元前，0年不存在默认为1' \
         '\n年限输入格式：以“*”号连接两个年份' \
         '\n\t如-400至-300年输入-400*-300' \
         '\n    文本框支持鼠标滚轮滑动和右键菜单功能' \
         '\n    软件详细使用说明见控件提示或使用说明文件' \
         '\n'))
		self.layLeftBottom.addWidget(self.btnInfo)
		self.btnInfo.setMaximumWidth(56)
		self.btnCopy = PushButton("复制全部")
		self.btnCopy.setObjectName('btnCopy')
		self.layLeftBottom.addWidget(self.btnCopy)
		self.btnCopy.setMaximumWidth(56)
		self.btnClear = PushButton("清空输出")
		# self.btnClear.setObjectName('btnClear')
		self.btnClear.clicked.connect(lambda : self.edit.clear())
		self.layLeftBottom.addWidget(self.btnClear)
		self.btnClear.setMaximumWidth(56)

	def astronomyCalculate(self):
		self.groupAstronomy = QGroupBox("天文计算")
		self.layCenterTop = QVBoxLayout()
		self.layCenter.addWidget(self.groupAstronomy, 0)
		self.groupAstronomy.setLayout(self.layCenterTop)  # 绑定布局
		self.groupAstronomy.setAlignment(Qt.AlignHCenter)
		self.layCenterTop.setContentsMargins(2, 5, 0, 5)
		self.layCenterTop.setSpacing(0)
		#self.layCenterTop.setMargin(3)
		self.layCenter.addStretch(1)
		self.groupPlanet = QGroupBox("步五星")
		self.layCenterCenter = QVBoxLayout()
		self.layCenter.addWidget(self.groupPlanet, 1)
		self.groupPlanet.setLayout(self.layCenterCenter)
		self.groupPlanet.setAlignment(Qt.AlignHCenter)
		self.layCenterCenter.setContentsMargins(2, 5, 0, 5)
		self.layCenterCenter.setSpacing(1)
		self.layCenter.addStretch(1)
		self.layCenterBottom = QHBoxLayout()
		self.layCenter.addLayout(self.layCenterBottom, 2)
		self.layCenterBottom.setSpacing(0)
		# 中上
		self.hlay11 = QHBoxLayout()
		self.hlay12 = QHBoxLayout()
		self.grid13 = QGridLayout()
		self.grid14 = QGridLayout()
		self.layCenterTop.addLayout(self.hlay11)
		self.layCenterTop.addLayout(self.hlay12)
		self.layCenterTop.addLayout(self.grid13)
		self.layCenterTop.addLayout(self.grid14)
		self.lstDegree = QListWidget()
		self.lstCoordinate = QListWidget()
		self.lstDegree.setStyleSheet("QListWidget {font: 13px} QListWidget::item {min-height: 17px}" )
		self.lstCoordinate.setStyleSheet("QListWidget {font: 13px} QListWidget::item {min-height: 17px}" )
		self.lstDegree.addItems(["今度表示",'古度表示'])
		self.lstDegree.setCurrentRow(0)
		self.hlay11.addWidget(self.lstDegree)
		self.lstDegree.setSpacing(2)
		self.lstDegree.setMaximumSize(68, 48)
		self.lstDegree.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
		self.lstDegree.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
		# self.lstDegree.setStyleSheet("QScrollBar{width:0height:0}")  # 样式表方法
		self.lstCoordinate.addItems(["赤道坐标",'黄道坐标'])
		self.lstCoordinate.setCurrentRow(0)
		self.hlay11.addWidget(self.lstCoordinate)
		self.lstCoordinate.setSpacing(2)
		self.lstCoordinate.setMaximumSize(68, 48)
		self.lstCoordinate.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
		self.lstCoordinate.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
		self.labYear = QLabel("输入时间")
		self.editYear = QLineEdit()
		self.labYear.setAlignment(Qt.AlignCenter)
		self.hlay12.addWidget(self.labYear)
		self.hlay12.addWidget(self.editYear)
		#self.grid13.addWidget(self.labYear, 0, 0, 1, 3)
		#self.grid13.addWidget(self.editYear, 0, 3, 1, 7)
		self.editYear.setMaximumWidth(130)
		self.editYear.setContentsMargins(0, 5, 10, 0)
		self.editYear.setText("-600")
		self.labGeoCoord = QLabel("地区")
		self.txtGeoLong = QLineEdit()
		self.txtGeoLong.setText('120')
		self.labGeoLong = QLabel("°E")
		self.txtGeoLat = QLineEdit()
		self.txtGeoLat.setText('35')
		self.labGeoLat = QLabel("°N")
		self.grid13.addWidget(self.labGeoCoord, 1, 0)
		self.labGeoCoord.setAlignment(Qt.AlignCenter)
		self.labGeoCoord.setToolTip("可在日食栏地区表中选择地点")
		self.grid13.addWidget(self.txtGeoLong, 1, 1, 1, 2)
		self.txtGeoLong.setToolTip(("向东为正"))
		self.txtGeoLong.setMaximumWidth(52)
		self.grid13.addWidget(self.labGeoLong, 1, 3)
		self.grid13.addWidget(self.txtGeoLat, 1, 4, 1, 2)
		self.txtGeoLat.setToolTip(("向北为正"))
		self.txtGeoLat.setMaximumWidth(52)
		self.labGeoLat.setContentsMargins(0, 0, 10, 0)
		self.grid13.addWidget(self.labGeoLat, 1, 6)
		self.labMassion = QLabel("星宿")
		self.cblMassion = ComboBox()
		self.btnMassionLong = PushButton("经度")
		self.btnMassionLat = PushButton("去极度")
		self.labMassion.setAlignment(Qt.AlignCenter)
		self.btnMassionLong.clicked.connect(self.thisStarJD)
		self.btnMassionLat.clicked.connect(self.thisStarQJD)
		self.grid13.addWidget(self.labMassion, 2, 0)
		self.grid13.addWidget(self.cblMassion, 2, 1, 1, 3)
		self.cblMassion.setMaximumWidth(75)
		self.cblMassion.addItem("全部")
		for i in range(28):
			self.cblMassion.addItem(esbx[i].name + ' ' + esbx[i].design, i)
		self.grid13.addWidget(self.btnMassionLong, 2, 4)
		self.btnMassionLong.setMaximumWidth(36)
		self.grid13.addWidget(self.btnMassionLat, 2, 5, 1, 2)
		self.btnMassionLat.setMaximumWidth(48)
		self.labSun = QLabel("太阳")
		self.cblSun = ComboBox()
		self.btnSunRST = PushButton("晨昏")
		self.btnSunRxd = RightClickButton("入宿度")
		self.btnSunRST.clicked.connect(lambda : ChenHun(self))
		self.btnSunRxd.clickedSignal.connect(self.thisSunRxdQjd)
		self.labSun.setAlignment(Qt.AlignCenter)
		self.btnSunRxd.setToolTip(("右击计算去极度"))
		self.grid13.addWidget(self.labSun, 3, 0)
		self.grid13.addWidget(self.cblSun, 3, 1, 1, 3)
		self.cblSun.setMaximumWidth(75)
		for i in range(len(stTable)):
			self.cblSun.addItem(stTable[i], i)
		self.grid13.addWidget(self.btnSunRST, 3, 4)
		self.btnSunRST.setMaximumWidth(36)
		self.grid13.addWidget(self.btnSunRxd, 3, 5, 1, 2)
		self.btnSunRxd.setMaximumWidth(48)
		self.labMoon = QLabel("月亮")
		self.cblMoon = ComboBox()
		self.btnMoonRST = PushButton("出没")
		self.btnMoonRxd = PushButton("入宿度")
		self.btnMoonRST.clicked.connect(lambda : MoonRiseSet(self))
		self.btnMoonRxd.clicked.connect(lambda : MoonRXD(self))
		self.labMoon.setAlignment(Qt.AlignCenter)
		self.grid13.addWidget(self.labMoon, 4, 0)
		self.grid13.addWidget(self.cblMoon, 4, 1, 1, 3)
		moonPhases = ["朔", "望", "上弦", "下弦", "全部月相", "指定节气"]
		self.cblMoon.addItems(moonPhases)
		self.cblMoon.setCurrentText("指定节气")
		self.cblMoon.setStyleSheet("QComboBox {font:12px;} QComboBox QAbstractItemView::item {min-height: 18px}")
		self.cblMoon.lineEdit().setCursorPosition(0)
		self.cblMoon.setMaximumWidth(75)
		self.grid13.addWidget(self.btnMoonRST, 4, 4)
		self.btnMoonRST.setMaximumWidth(36)
		self.grid13.addWidget(self.btnMoonRxd, 4, 5, 1, 2)
		self.btnMoonRxd.setMaximumWidth(48)
		self.labPlanet = QLabel("五星")
		self.cblPlanet = ComboBox()
		self.btnPlanetXC = PushButton("星次")
		self.btnPlanetRxd = PushButton("入宿度")
		self.btnPlanetXC.clicked.connect(self.thisPlanetJD)
		self.btnPlanetRxd.clicked.connect(self.thisPlanetJD)
		self.labPlanet.setAlignment(Qt.AlignCenter)
		self.grid13.addWidget(self.labPlanet, 5, 0)
		self.grid13.addWidget(self.cblPlanet, 5, 1, 1, 3)
		self.cblPlanet.setMaximumWidth(75)
		self.cblPlanet.addItems(fivePlanets)
		self.grid13.addWidget(self.btnPlanetXC, 5, 4)
		self.btnPlanetXC.setMaximumWidth(36)
		self.grid13.addWidget(self.btnPlanetRxd, 5, 5, 1, 2)
		self.btnPlanetRxd.setMaximumWidth(48)
		self.labStar = QLabel("恒星")
		self.cblStar = ComboBox()
		self.cblStar.addItem("全部")
		self.cblStar.addItems(hxb_name)
		#fm = QFontMetrics(self.cblStar.font())
		#for i in range(len(hxb_name)):
		#	self..addItem(fm.elidedText(hxb_name[i], Qt.ElideNone, self.cblStar.width()))  # 省略在后（仅QLineText有用）
		self.cblStar.setCompleter(QCompleter(hxb_name))   # 输入自动补全，项来自其本身的值（self.cblStar.model()）
		self.cblStar.view().setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
		self.btnStarLong = PushButton("经度")
		self.btnStarLat = PushButton("去极度")
		self.btnStarLong.clicked.connect(self.thisStarJD)
		self.btnStarLat.clicked.connect(self.thisStarQJD)
		self.btnStarLat.setObjectName('btnStarLat')
		self.labStar.setAlignment(Qt.AlignCenter)
		self.grid13.addWidget(self.labStar, 6, 0)
		self.grid13.addWidget(self.cblStar, 6, 1, 1, 3)
		self.cblStar.setMaximumWidth(75)
		self.grid13.addWidget(self.btnStarLong, 6, 4)
		self.btnStarLong.setMaximumWidth(36)
		self.grid13.addWidget(self.btnStarLat, 6, 5, 1, 2)
		self.btnStarLat.setMaximumWidth(48)
		self.labSunEclipse = QLabel("日食")
		self.cblSEarea = ComboBox()
		self.cblSEtype = ComboBox()
		self.cblSEtype.setFocusPolicy(False)
		self.cblSEarea.addItems(city)
		self.cblSEarea.insertItem(1, "填写坐标")
		self.cblSEarea.activated.connect(lambda : GetGeoCoord(self))  # 选取内容信号
		self.labSunEclipse.setAlignment(Qt.AlignCenter)
		self.grid13.addWidget(self.labSunEclipse, 7, 0)
		self.grid13.addWidget(self.cblSEarea, 7, 1, 1, 3)
		self.grid13.addWidget(self.cblSEtype, 7, 4, 1, 3)
		self.cblSEarea.setMaximumWidth(75)
		self.cblSEtype.setMaximumWidth(85)
		self.labGLB = QLabel("古历表")
		self.cblGLBtype = ComboBox()
		self.cblGLBtype.addItems(["宿度表"])
		# self.cblGLBtype.setFont("")
		self.cblGLB = ComboBox()
		self.cblGLB.addItems(lsGLB)
		self.cblGLB.activated.connect(lambda: GLB(self))
		self.grid13.addWidget(self.labGLB, 8, 0)
		self.grid13.addWidget(self.cblGLBtype, 8, 1, 1, 3)
		self.cblGLBtype.setMaximumWidth(75)
		self.grid13.addWidget(self.cblGLB, 8, 4, 1, 3)
		self.cblGLB.setMaximumWidth(85)
		#self.cblGLB.setMaximumWidth(64)
		self.labHDZX = QLabel("昏旦中星")
		self.cblSandhya = ComboBox()
		self.btnHZX = PushButton("昏")
		self.btnDZX = PushButton("旦")
		self.btnYBZX = PushButton("夜半")
		self.btnHZX.clicked.connect(self.thisHDZX)
		self.btnDZX.clicked.connect(self.thisHDZX)
		self.btnYBZX.clicked.connect(self.thisHDZX)
		self.grid14.addWidget(self.labHDZX, 0, 0)
		self.labHDZX.setMaximumWidth(54)
		self.grid14.addWidget(self.cblSandhya, 0, 1, 1, 2)
		self.cblSandhya.addItems(sandhya)
		self.cblSandhya.lineEdit().setCursorPosition(0)
		self.cblSandhya.setMaximumWidth(62)
		self.grid14.addWidget(self.btnYBZX, 0, 3)
		self.btnYBZX.setMaximumWidth(36)
		self.grid14.addWidget(self.btnHZX, 0, 4)
		self.btnHZX.setMaximumWidth(24)
		# self.btnHZX.setContentsMargins(14, 0, 4, 0)
		self.grid14.addWidget(self.btnDZX, 0, 5)
		self.btnDZX.setMaximumWidth(24)
		self.labHdzxYear = QLabel("中星年代")
		self.txtHdzxYear = QLineEdit()
		self.cbZXstar = QCheckBox()
		self.btnSunYear = PushButton("日在")
		self.btnHzxYear = PushButton("昏")
		self.btnDzxYear = PushButton("旦")
		self.btnSunYear.clicked.connect(lambda : SunPosition(self))
		self.btnHzxYear.clicked.connect(self.thisHdzxYear)
		self.btnDzxYear.clicked.connect(self.thisHdzxYear)
		self.grid14.addWidget(self.labHdzxYear)
		self.labHdzxYear.setMaximumWidth(54)
		self.grid14.addWidget(self.txtHdzxYear)
		self.txtHdzxYear.setMaximumWidth(42)
		self.txtHdzxYear.setPlaceholderText(("入宿度"))
		self.txtHdzxYear.setToolTip("未知则缺省，默认为0")
		self.cbZXstar.setStyleSheet("QCheckBox::indicator {width:20px;Height:20px;} QCheckBox {spacing: 0px}")  # 复选框、文本
		self.cbZXstar.setToolTip("默认从星宿表中取星，勾选后从恒星表中取星")
		self.grid14.addWidget(self.cbZXstar)
		self.cbZXstar.setMaximumWidth(20)
		self.cbZXstar.isChecked()
		self.grid14.addWidget(self.btnSunYear)
		self.btnSunYear.setMaximumWidth(36)
		self.grid14.addWidget(self.btnHzxYear)
		self.btnHzxYear.setMaximumWidth(24)
		self.grid14.addWidget(self.btnDzxYear)
		self.btnDzxYear.setMaximumWidth(24)

	def buWuXing(self):
		# 中中
		self.hlay21 = QHBoxLayout()
		self.grid22 = QGridLayout()
		#self.hlay23 = QHBoxLayout()
		self.hlay24 = QHBoxLayout()
		self.hlay25 = QHBoxLayout()
		self.hlay21.setContentsMargins(0, 0, 1, 0)
		self.layCenterCenter.addLayout(self.hlay21)
		self.layCenterCenter.addLayout(self.grid22)
		self.grid22.setAlignment(Qt.AlignHCenter)
		self.grid22.setSpacing(3)
		self.hlay25.setSpacing(4)
		#self.layCenterCenter.addLayout(self.hlay23)
		self.layCenterCenter.addLayout(self.hlay24)
		self.layCenterCenter.addLayout(self.hlay25)
		self.cblPL = ComboBox()
		self.hlay21.addWidget(self.cblPL)
		self.cblPL.setMaximumWidth(70)
		self.cblPL.addItem("三统历")
		self.cblPL.setFocusPolicy(False)
		self.hlay21.addStretch(1)
		self.cbPreal = QCheckBox("实历")
		self.hlay21.addWidget(self.cbPreal)
		self.cbPreal.setChecked(True)
		self.btnPselect = PushButton("全选")
		self.btnPselect.clicked.connect(lambda : planetAllSelect(self))
		self.hlay21.addWidget(self.btnPselect)
		self.btnPselect.setMaximumWidth(36)
		self.planetGroup = QButtonGroup()
		self.planetGroup.setExclusive(False)
		self.planetGroup.addButton(self.cbPreal, 7)
		self.cbPs = QCheckBox("水")
		self.planetGroup.addButton(self.cbPs, 0)
		self.cbPs.setMaximumWidth(32)
		self.grid22.addWidget(self.cbPs, 0, 0)
		self.cbPj = QCheckBox("金")
		self.cbPj.setMaximumWidth(32)
		self.planetGroup.addButton(self.cbPj, 1)
		self.grid22.addWidget(self.cbPj, 0, 1)
		self.cbPh = QCheckBox("火")
		self.planetGroup.addButton(self.cbPh, 2)
		self.grid22.addWidget(self.cbPh, 0, 2)
		self.cbPm = QCheckBox("木")
		self.planetGroup.addButton(self.cbPm, 3)
		self.grid22.addWidget(self.cbPm, 0, 3)
		self.cbPt = QCheckBox("土")
		self.planetGroup.addButton(self.cbPt, 4)
		self.grid22.addWidget(self.cbPt, 0, 4)

		self.btnSX = PushButton("岁术")
		self.btnSX.clicked.connect(lambda : stlSuiShu(self))
		self.grid22.addWidget(self.btnSX, 1, 0)
		self.btnSX.setMaximumWidth(36)
		self.btnCX = PushButton("晨见")
		self.btnCX.clicked.connect(lambda : ChenShiXian(self))
		self.grid22.addWidget(self.btnCX, 1, 1)
		self.btnCX.setMaximumWidth(36)
		self.btnWB = PushButton("五步")
		self.btnWB.clicked.connect(lambda : WuBu(self))
		self.grid22.addWidget(self.btnWB, 1, 2)
		self.btnWB.setMaximumWidth(36)
		self.btnHC = PushButton("合辰")
		self.btnHC.clicked.connect(lambda : HeChenXingDu(self))
		self.grid22.addWidget(self.btnHC, 1, 3)
		self.btnHC.setMaximumWidth(36)
		self.btnJS = PushButton("交食")
		self.btnJS.clicked.connect(lambda : stlJiaoShi(self))
		self.grid22.addWidget(self.btnJS, 1, 4)
		self.btnJS.setMaximumWidth(36)
		self.labSL = QLabel("实历")
		self.labSL.setStyleSheet("QLabel{font:12px; padding:3px}")
		self.hlay24.addWidget(self.labSL)
		self.hlay21.stretch(1)
		self.cbSun = QCheckBox("日")
		self.cbSun.setStyleSheet("QCheckBox {spacing:2px; padding:3px}")
		self.planetGroup.addButton(self.cbSun, 5)
		self.hlay24.addWidget(self.cbSun)
		self.cbMoon = QCheckBox("月")
		self.cbMoon.setStyleSheet("QCheckBox {spacing:2px; padding:3px}")
		self.planetGroup.addButton(self.cbMoon, 6)
		self.hlay24.addWidget(self.cbMoon)
		self.btnPosition = PushButton("位置")
		self.btnPosition.setStyleSheet("QPushButton {padding:4px}")
		self.btnPosition.clicked.connect(lambda: Position(self))
		self.hlay24.addWidget(self.btnPosition)
		self.btnPosition.setMaximumWidth(34)
		self.hlay24.addStretch(1)
		self.cbStar = QCheckBox("恒星")
		self.planetGroup.addButton(self.cbStar, 8)
		self.cbStar.setStyleSheet("QCheckBox::indicator {Width:14px;Height:14px} QCheckBox {spacing: 2px}")
		self.hlay24.addWidget(self.cbStar)
		self.btnHR = PushButton("合日")
		self.btnHR.clicked.connect(lambda: HeRi(self))
		self.hlay25.addWidget(self.btnHR)
		self.btnHR.setMaximumWidth(36)
		self.btnCR = PushButton("冲日")
		self.btnCR.clicked.connect(lambda: ChongRi(self))
		self.hlay25.addWidget(self.btnCR)
		self.btnCR.setMaximumWidth(36)
		self.btnDJ = PushButton("大距")
		self.btnDJ.clicked.connect(lambda: DaJu(self))
		self.hlay25.addWidget(self.btnDJ)
		self.btnDJ.setMaximumWidth(36)
		self.btnLiu = PushButton("留")
		self.btnLiu.clicked.connect(lambda: Liu(self))
		self.hlay25.addWidget(self.btnLiu)
		self.btnLiu.setMaximumWidth(24)
		self.btnYYX = PushButton("月掩星")
		self.btnYYX.setToolTip('勾选行星或恒星计算')
		self.btnYYX.clicked.connect(lambda: YYX(self))
		self.hlay25.addWidget(self.btnYYX)
		self.btnYYX.setMaximumWidth(48)
		# 中下
		self.layCenterBottom.setSpacing(3)
		self.layCenterBottom.setContentsMargins(3, 0, 0, 0)
		self.btnGZtable = RightClickButton("甲子表")
		self.btnGZtable.clickedSignal.connect(self.thisGanZhiTable)
		self.layCenterBottom.addWidget(self.btnGZtable)
		self.btnGZtable.setMaximumWidth(48)
		self.btnGZtable.setToolTip(("右击从1开始排序"))
		self.btnJQtable = RightClickButton("节气表")
		self.btnJQtable.clickedSignal.connect(self.thisJieQiTable)
		self.btnJQtable.setToolTip(("右击冬至起排"))
		self.layCenterBottom.addWidget(self.btnJQtable)
		self.btnJQtable.setMaximumWidth(48)
		self.btnXCtable = PushButton("星次表")
		self.btnXCtable.clicked.connect(lambda : XingCiTable(self))
		self.layCenterBottom.addWidget(self.btnXCtable)
		self.btnXCtable.setMaximumWidth(48)
		self.btnSXtable = PushButton("岁星表")
		self.btnSXtable.clicked.connect(lambda : SuiXingTable(self))
		self.layCenterBottom.addWidget(self.btnSXtable)
		self.btnSXtable.setMaximumWidth(48)

	def tools(self):
		self.groupTool = QGroupBox("快捷工具")
		self.layRightTop = QVBoxLayout()
		self.layRight.addWidget(self.groupTool)
		self.groupTool.setLayout(self.layRightTop)  # 绑定布局
		self.groupTool.setAlignment(Qt.AlignHCenter)
		self.layRightTop.setSpacing(0)
		self.layRightTop.setContentsMargins(3, 3, 3, 3)
		self.groupBZS = QGroupBox("步中朔")
		self.layRightBottom = QGridLayout()
		self.layRight.addWidget(self.groupBZS)
		self.groupBZS.setLayout(self.layRightBottom)  # 绑定布局
		self.groupBZS.setAlignment(Qt.AlignHCenter)
		# 右上
		self.hlay321 = QHBoxLayout()
		self.hlay311 = QHBoxLayout()
		self.labToolJN = QLabel("\t1.年号查询与纪年转换")
		self.layRightTop.addLayout(self.hlay311)
		self.labToolJN.setStyleSheet("QLabel{font:12px;padding:5px}")
		self.hlay311.addWidget(self.labToolJN)
		self.hlay312 = QHBoxLayout()
		self.labEditYear = QLabel("输入年份")
		self.labEditYear.setContentsMargins(0, 0, 1, 0)
		self.txtEditYear = QLineEdit()
		self.btnJN = PushButton("纪 年")
		self.btnNGX = PushButton("年干支")
		self.txtEditYear.returnPressed.connect(lambda : YearConvert(self))
		self.btnJN.clicked.connect(lambda : YearConvert(self))
		self.btnNGX.clicked.connect(lambda : YearGZ(self))
		self.layRightTop.addLayout(self.hlay312)
		self.hlay312.addWidget(self.labEditYear)
		self.labEditYear.setMaximumWidth(52)
		self.hlay312.addWidget(self.txtEditYear)
		self.txtEditYear.setPlaceholderText(("年限 或 年号 或 朝代"))
		cplEra = QCompleter(single_eranames)
		#cplEra.popup().setStyleSheet("{font: 18px} ")
		cplEra.setFilterMode(Qt.MatchContains)
		cplEra.activated.connect(lambda : YearConvert(self))
		self.txtEditYear.setCompleter(cplEra)
		self.txtEditYear.setMaximumWidth(140)
		self.hlay312.addWidget(self.btnJN)
		self.btnJN.setMaximumWidth(46)
		self.hlay312.addWidget(self.btnNGX)
		self.btnNGX.setMaximumWidth(46)
		self.labToolJD = QLabel("\t2.儒略日与公历转换")
		self.layRightTop.addLayout(self.hlay321)
		self.labToolJD.setStyleSheet("QLabel{font:12px;padding:5px}")
		self.hlay321.addWidget(self.labToolJD)
		self.hlay322 = QHBoxLayout()
		self.labEditDate = QLabel("输入日期")
		self.labEditDate.setContentsMargins(0, 0, 1, 0)
		self.btnJD = PushButton("儒略日")
		self.btnDateCalc = PushButton("日期差")
		self.btnDateCalc.setToolTip('日期加减运算')
		self.btnDateCalc.clicked.connect(lambda : DateCalc(self))
		self.btnJD.clicked.connect(lambda : JDconvert(self))
		self.layRightTop.addLayout(self.hlay322)
		self.hlay322.addWidget(self.labEditDate)
		self.labEditDate.setMaximumWidth(52)
		self.txtEditDate = QLineEdit()
		self.txtEditDate.returnPressed.connect(lambda : dayConvert(self))
		self.txtEditDate.setPlaceholderText(time.strftime('%Y-%m-%d'))
		self.hlay322.addWidget(self.txtEditDate)
		self.txtEditDate.setMaximumWidth(144)
		self.hlay322.addWidget(self.btnJD)
		self.btnJD.setMaximumWidth(46)
		self.hlay322.addWidget(self.btnDateCalc)
		self.btnDateCalc.setMaximumWidth(46)
		self.hlay331 = QHBoxLayout()
		self.labToolTime = QLabel("\t3.恒星时与太阳时")
		self.layRightTop.addLayout(self.hlay331)
		self.labToolTime.setStyleSheet("QLabel{font:12px;padding:5px}")
		self.hlay331.addWidget(self.labToolTime)
		self.hlay332 = QHBoxLayout()
		self.labEditTime = QLabel("输入时间")
		self.labEditTime.setContentsMargins(0, 0, 1, 0)
		self.txtEditTime = QLineEdit()
		self.btnSideralTime = PushButton("恒星时")
		self.btnSideralTime.clicked.connect(lambda : SiderealTime(self))
		self.btnSolarTime = RightClickButton("太阳时")
		self.btnSolarTime.clickedSignal.connect(self.thisSolarTime)
		self.btnSolarTime.setToolTip('单击平转真，右击真转平')
		self.layRightTop.addLayout(self.hlay332)
		self.hlay332.addWidget(self.labEditTime)
		self.labEditYear.setMaximumWidth(52)
		self.hlay332.addWidget(self.txtEditTime)
		self.txtEditTime.setPlaceholderText(time.strftime('%Y-%m-%d %H:%M:%S'))
		self.txtEditTime.setFixedWidth(140)
		self.hlay332.addWidget(self.btnSideralTime)
		self.btnSideralTime.setMaximumWidth(46)
		self.hlay332.addWidget(self.btnSolarTime)
		self.btnSolarTime.setMaximumWidth(46)
		self.hlay391 = QHBoxLayout()
		self.labCalculator = QLabel("\t4.简易计算器(+-*/%)")
		self.layRightTop.addLayout(self.hlay391)
		self.labCalculator.setStyleSheet("QLabel{font:12px;padding:5px}")
		self.hlay391.addWidget(self.labCalculator)
		self.hlay392 = QHBoxLayout()
		self.labEditExpression = QLabel("输入算式")
		self.labEditExpression.setContentsMargins(0, 0, 1, 0)
		self.txtEditExpression = QLineEdit()
		self.txtEditExpression.returnPressed.connect(lambda : Calculator(self))
		self.txtEditExpression.setToolTip("回车计算")
		self.btnDMS = PushButton("度分秒")
		self.btnHMS = PushButton("时分秒")
		self.btnDMS.clicked.connect(lambda: Deg2DMS(self))
		self.btnHMS.clicked.connect(lambda: Deg2HMS(self))
		self.layRightTop.addLayout(self.hlay392)
		self.hlay392.addWidget(self.labEditExpression)
		self.hlay392.addWidget(self.txtEditExpression)
		self.txtEditExpression.setPlaceholderText("回车查看说明")
		self.txtEditExpression.setMaximumWidth(140)
		self.hlay392.addWidget(self.btnDMS)
		self.btnDMS.setMaximumWidth(46)
		self.hlay392.addWidget(self.btnHMS)
		self.btnHMS.setMaximumWidth(46)
		self.hlay341 = QHBoxLayout()
		self.labToolGZdate = QLabel("\t5.已知干支和年限求可能的日期")
		self.layRightTop.addLayout(self.hlay341)
		self.labToolGZdate.setStyleSheet("QLabel{font:12px;padding:5px}")
		self.hlay341.addWidget(self.labToolGZdate)
		self.hlay342 = QHBoxLayout()
		self.labEditGZ = QLabel("输入干支")
		self.labEditGZ.setContentsMargins(0, 0, 1, 0)
		self.txtEditGZ = QLineEdit()
		self.txtEditGZ.setPlaceholderText("甲子")
		self.labEditGZScope = QLabel("年份范围")
		self.txtEditGZScope = QLineEdit()
		self.cblFindDate = QComboBox()
		self.cblFindDate.addItems(['年', '朔', '望', '上弦', '下弦'])
		self.cblFindDate.activated.connect(lambda: findDate(self))
		self.cblDateTolerance = QComboBox()
		self.cblDateTolerance.addItems(['-3', '-2', '-1', '0', '1', '2', '3'])
		self.cblDateTolerance.setCurrentText('0')
		self.cblDateTolerance.setToolTip('数字为月相前(负)后(正)日')
		self.layRightTop.addLayout(self.hlay342)
		self.hlay342.addWidget(self.labEditGZ)
		self.labEditGZ.setMaximumWidth(52)
		self.hlay342.addWidget(self.txtEditGZ)
		self.txtEditGZ.setMaximumWidth(50)
		self.txtEditGZ.setPlaceholderText(("甲子"))
		self.layRightTop.addLayout(self.hlay332)
		self.hlay342.addWidget(self.labEditGZScope)
		self.labEditGZScope.setMaximumWidth(52)
		self.labEditGZScope.setContentsMargins(1, 0, 1, 0)
		self.hlay342.addWidget(self.txtEditGZScope)
		self.txtEditGZScope.setPlaceholderText(("-660*-600"))
		self.txtEditGZScope.setMaximumWidth(68)
		self.hlay342.addWidget(self.cblDateTolerance)
		self.cblDateTolerance.setMaximumWidth(20)
		#self.cblFindDate.setStyleSheet("QComboBox::drop-down{border:none;}")
		self.hlay342.addWidget(self.cblFindDate)
		self.cblFindDate.setMaximumWidth(46)
		# self.btnGZyear.setContentsMargins(8, 0, 8, 0)

		#self.hlay342.addStretch(1)
		self.hlay351 = QHBoxLayout()
		self.labToolGZRQ = QLabel("\t6.已知历日和朔日求阴历日期")
		self.layRightTop.addLayout(self.hlay351)
		self.labToolGZRQ.setStyleSheet("QLabel{font:12px;padding:5px}")
		self.hlay351.addWidget(self.labToolGZRQ)
		self.hlay352 = QHBoxLayout()
		self.labEditSRGX = QLabel("朔日干支")
		self.labEditSRGX.setContentsMargins(0, 0, 1, 0)
		self.txtEditSRGZ = QLineEdit()
		self.labEditLRGZ = QLabel("历日干支")
		self.txtEditLRGZ = QLineEdit()
		self.txtEditSRGZ.returnPressed.connect(lambda : YueLi(self))
		self.txtEditLRGZ.returnPressed.connect(lambda : YNRQ(self))
		self.btnGZRQ = PushButton("日期")
		self.btnGZRQ.clicked.connect(lambda : YNRQ(self))
		self.btnGZS = PushButton("朔")
		self.btnGZS.clicked.connect(lambda : NTS(self))
		self.btnGZYL = PushButton("月历")
		self.btnGZYL.clicked.connect(lambda : YueLi(self))
		self.layRightTop.addLayout(self.hlay352)
		self.hlay352.addWidget(self.labEditSRGX)
		self.labEditSRGX.setMaximumWidth(50)
		self.hlay352.addWidget(self.txtEditSRGZ)
		self.txtEditSRGZ.setMaximumWidth(50)
		self.hlay352.addWidget(self.labEditLRGZ)
		self.labEditLRGZ.setMaximumWidth(50)
		self.labEditLRGZ.setContentsMargins(1, 0, 1, 0)
		self.hlay352.addWidget(self.txtEditLRGZ)
		self.txtEditLRGZ.setMaximumWidth(45)
		self.hlay352.addWidget(self.btnGZRQ)
		self.btnGZRQ.setMaximumWidth(33)
		self.hlay352.addWidget(self.btnGZYL)
		self.btnGZYL.setMaximumWidth(33)
		self.hlay352.addWidget(self.btnGZS)
		self.btnGZS.setMaximumWidth(22)
		self.hlay371 = QHBoxLayout()
		self.labToolEclipse = QLabel("\t7.求指定年份范围内的日月食")
		self.layRightTop.addLayout(self.hlay371)
		self.labToolEclipse.setStyleSheet("QLabel{font:12px;padding:5px}")
		self.hlay371.addWidget(self.labToolEclipse)
		self.hlay372 = QHBoxLayout()
		self.labEditScope = QLabel("年限")
		self.txtEditScope = QLineEdit()
		self.labEditFEgz = QLabel("输入干支")
		self.labEditFEgz.setContentsMargins(0, 0, 1, 0)
		self.txtEditFEgz = QLineEdit()
		self.btnSunFE = PushButton("日食")
		self.btnMoonFE = PushButton("月食")
		self.btnFE = PushButton("食")
		self.btnSunFE.clicked.connect(self.thisFindEclipse)
		self.btnMoonFE.clicked.connect(self.thisFindEclipse)
		self.btnFE.clicked.connect(self.thisFindEclipse)
		self.txtEditScope.returnPressed.connect(self.thisFindEclipse)
		self.layRightTop.addLayout(self.hlay372)
		self.hlay372.addWidget(self.labEditFEgz)
		self.labEditFEgz.setMaximumWidth(50)
		self.hlay372.addWidget(self.txtEditFEgz)
		self.txtEditFEgz.setMaximumWidth(50)
		self.txtEditFEgz.setPlaceholderText(("可缺省"))
		self.labEditScope.setMaximumWidth(52)
		self.hlay372.addWidget(self.labEditScope)
		self.labEditScope.setContentsMargins(1, 0, 1, 0)
		self.hlay372.addWidget(self.txtEditScope)
		self.txtEditScope.setMaximumWidth(70)
		self.txtEditScope.setPlaceholderText(("-722*-481"))
		self.hlay372.addWidget(self.btnSunFE)
		self.btnSunFE.setMaximumWidth(33)
		self.hlay372.addWidget(self.btnMoonFE)
		self.btnMoonFE.setMaximumWidth(33)
		self.hlay372.addWidget(self.btnFE)
		self.btnFE.setMaximumWidth(22)
		self.hlay381 = QHBoxLayout()
		self.labEditSXJN = QLabel("\t8.岁星纪年与木星位置")
		self.layRightTop.addLayout(self.hlay381)
		self.labEditSXJN.setStyleSheet("QLabel{font:12px;padding:5px}")
		self.hlay381.addWidget(self.labEditSXJN)
		self.hlay382 = QHBoxLayout()
		self.labEditSXyear = QLabel("输入年份")
		self.labEditSXyear.setContentsMargins(0, 0, 1, 0)
		self.txtEditSxjn = QLineEdit()
		self.btnTS = PushButton("太岁")
		self.btnWCC = PushButton("无超辰")
		self.btnSTS = PushButton("三统术")
		self.btnMX = PushButton("木星")
		self.btnQB = PushButton("全部")
		self.btnTS.clicked.connect(lambda: TSJN(self))
		self.btnWCC.clicked.connect(lambda: WCC(self))
		self.btnSTS.clicked.connect(lambda: STSCC(self))
		self.btnMX.clicked.connect(lambda: MXWZ(self))
		self.btnQB.clicked.connect(lambda: SXJN(self))
		self.txtEditSxjn.returnPressed.connect(lambda: SXJN(self))
		self.layRightTop.addLayout(self.hlay382)
		self.hlay382.addWidget(self.labEditSXyear)
		self.labEditSXyear.setMaximumWidth(52)
		self.hlay382.addWidget(self.txtEditSxjn)
		self.txtEditSxjn.setMaximumWidth(48)
		self.hlay382.addWidget(self.btnQB)
		self.btnQB.setMaximumWidth(32)
		self.hlay382.addWidget(self.btnMX)
		self.btnMX.setMaximumWidth(32)
		self.hlay382.addWidget(self.btnTS)
		self.btnTS.setMaximumWidth(32)
		self.hlay382.addWidget(self.btnWCC)
		self.btnWCC.setMaximumWidth(44)
		self.hlay382.addWidget(self.btnSTS)
		self.btnSTS.setMaximumWidth(44)
		#self.hlay392.addStretch(1)

	def buZhongShuo(self):
		# 右下
		self.layRightBottom.setSpacing(0)
		self.layRightBottom.setContentsMargins(2, 3, 2, 0)
		#self.groupBZS.setAlignment(Qt.AlignCenter)
		self.tabCalendar = QTabWidget()
		self.wTab1 = QWidget()
		self.wTab2 = QWidget()
		self.wTab3 = QWidget()
		self.grid41 = QGridLayout()
		self.grid42 = QGridLayout()
		self.grid43 = QGridLayout()
		self.tabCalendar.setMaximumSize(244, 80)
		self.layRightBottom.addWidget(self.tabCalendar, 0, 0, 3, 1)
		self.wTab1.setLayout(self.grid41)  # 窗口容器绑定布局
		self.wTab2.setLayout(self.grid42)
		self.wTab3.setLayout(self.grid43)
		self.grid41.setSpacing(2)
		self.grid41.setContentsMargins(10, 4, 6, 4)
		self.grid43.setSpacing(2)
		self.grid43.setContentsMargins(10, 4, 6, 4)
		self.tabCalendar.addTab(self.wTab1, "古六历")  # 添加在容器里
		self.gllGroup = QButtonGroup(self.wTab1)
		self.gllGroup.setExclusive(False)
		self.t1_l1 = QCheckBox("殷历")
		self.t1_l2 = QCheckBox("周历")
		self.t1_l3 = QCheckBox("鲁历0")
		self.t1_l4 = QCheckBox("鲁历1")
		self.t1_l5 = QCheckBox("颛顼历")
		self.t1_l6 = QCheckBox("黄帝历")
		self.t1_l7 = QCheckBox("夏历")
		self.t1_l8 = QCheckBox("真夏历")
		self.tabCalendar.addTab(self.wTab2, "三国")
		self.tkGroup = QButtonGroup(self.wTab2)
		self.tkGroup.setExclusive(False)
		self.t2_l1 = QCheckBox("四分历")
		self.t2_l2 = QCheckBox("乾象历")
		self.t2_l3 = QCheckBox("景初历")
		self.tabCalendar.addTab(self.wTab3, "南北朝")
		self.nsdGroup = QButtonGroup(self.wTab3)
		self.nsdGroup.setExclusive(False)
		self.t3_l1 = QCheckBox("景初")
		self.t3_l2 = QCheckBox("兴和")
		self.t3_l3 = QCheckBox("元嘉")
		self.t3_l4 = QCheckBox("天保")
		self.t3_l5 = QCheckBox("大明")
		self.t3_l6 = QCheckBox("天和")
		self.t3_l7 = QCheckBox("正光")
		self.t3_l8 = QCheckBox("大象")
		self.btnLselect = PushButton("全选")
		self.btnLinfo = RightClickButton("说明")
		self.btnCompare = PushButton("对比")
		self.btnLinfo.setToolTip("右击查看基本说明")
		self.btnLselect.clicked.connect(lambda : calendarAllSelect(self))
		self.btnLinfo.clickedSignal.connect(self.thisInfo)
		self.layRightBottom.addWidget(self.btnLselect, 2, 1)
		self.layRightBottom.addWidget(self.btnLinfo, 0, 1)
		# self.layRightBottom.addWidget(self.btnCompare, 1, 1)
		self.btnLselect.setMaximumWidth(34)
		self.btnLinfo.setMaximumWidth(34)
		self.btnCompare.setMaximumWidth(34)
		self.hlay44 = QHBoxLayout()
		self.hlay44.setContentsMargins(0, 3, 0, 3)
		self.layRightBottom.addLayout(self.hlay44, 4, 0, 1, 2)
		self.rbLYSS = QRadioButton('岁首起排')
		self.rbLYSS.setChecked(True)
		self.rbLYSS.toggled.connect(lambda : self.rbLYSS.setText(['历元起排', '岁首起排'][self.rbLYSS.isChecked()]))
		self.rbLYSS.toggled.connect(self.setLYSS)
		#self.rbLYSS.setStyleSheet("QCheckBox::indicator {width:18px;Height:18px;} QCheckBox { spacing: 2px}")
		self.cblZSLB = QComboBox()
		self.labLyear = QLabel(" 年份 ")
		self.txtLyear = QLineEdit()
		self.btnLlastYear = PushButton('<')
		self.btnLnextYear = PushButton('>')
		self.btnLlastYear.setMaximumWidth(16)
		self.txtLyear.setMaximumWidth(48)
		self.btnLnextYear.setMaximumWidth(16)
		self.btnLlastYear.clicked.connect(lambda :self.txtLyear.setText(str(int(self.txtLyear.text())-1)))
		self.btnLnextYear.clicked.connect(lambda :self.txtLyear.setText(str(int(self.txtLyear.text())+1)))
		self.cbLreal = QCheckBox("实历")
		self.labLyear.setContentsMargins(2, 0, 0, 0)
		self.cbLreal.setStyleSheet("QCheckBox{ padding:5px }")
		self.tqlf = [self.cbLreal,
		             [self.t1_l1, self.t1_l2, self.t1_l3, self.t1_l4, self.t1_l5, self.t1_l6, self.t1_l7, self.t1_l8],
		             [self.t2_l1, self.t2_l2, self.t2_l3],
		             [self.t3_l1, self.t3_l2, self.t3_l3, self.t3_l4, self.t3_l5, self.t3_l6, self.t3_l7, self.t3_l8],]
		for i in range(len(self.tqlf[1])):  # tab1
			self.gllGroup.addButton(self.tqlf[1][i], i)
			self.grid41.addWidget(self.tqlf[1][i], i % 2, i // 2)
		for i in range(len(self.tqlf[2])):  # tab2
			self.tkGroup.addButton(self.tqlf[2][i], i)
			self.grid42.addWidget(self.tqlf[2][i], 0, i)
		for i in range(len(self.tqlf[3])):  # tab3
			self.tkGroup.addButton(self.tqlf[3][i], i)
			self.grid43.addWidget(self.tqlf[3][i], i % 2, i // 2)
		self.cbLB = QCheckBox()
		self.cbLB.setStyleSheet("QCheckBox::indicator {width:18px;Height:18px;} QCheckBox {spacing: 2px}")
		self.cbLB.setChecked(True)
		self.cbLB.setToolTip("默认从列表中取值，取消勾选后从选项卡中取值")
		self.hlay44.addWidget(self.cbLB)
		self.cblZSLB.addItems(lbm)
		self.cblZSLB.setCurrentIndex(14)  # 当前历法
		self.txtLyear.setText("619")
		self.cblZSLB.setMaxVisibleItems(8)
		self.cblZSLB.view().setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
		self.hlay44.addWidget(self.cblZSLB)
		self.cblZSLB.setMaximumWidth(96)
		self.hlay44.addStretch(2)
		self.hlay44.addWidget(self.rbLYSS)
		self.hlay44.addStretch(1)
		self.hlay44.addWidget(self.cbLreal)
		self.hlay45 = QHBoxLayout()
		self.hlay46 = QHBoxLayout()
		self.hlay47 = QHBoxLayout()
		self.hlay471 = QHBoxLayout()
		self.hlay472 = QHBoxLayout()
		self.hlay47.addLayout(self.hlay471)
		self.hlay47.addStretch(3)
		self.hlay47.addLayout(self.hlay472)
		self.layRightBottom.addLayout(self.hlay45, 6, 0, 1, 2)
		self.layRightBottom.addLayout(self.hlay46, 7, 0, 1, 2)
		self.layRightBottom.addLayout(self.hlay47, 5, 0, 1, 2)
		self.hlay45.setSpacing(4)
		self.hlay46.setSpacing(4)
		self.hlay471.setSpacing(0)
		self.hlay472.setSpacing(4)
		self.hlay45.setAlignment(Qt.AlignCenter)
		self.hlay46.setAlignment(Qt.AlignCenter)
		self.hlay45.setContentsMargins(0, 0, 0, 0)
		self.hlay46.setContentsMargins(0, 0, 0, 0)
		self.hlay47.setContentsMargins(0, 0, 0, 0)
		self.btnLrbn = PushButton("入蔀年")
		self.btnLtzs = PushButton("天正朔")
		self.btnLshuo = PushButton("朔")
		self.btnLwang = PushButton("望")
		self.btnLzq = PushButton("中气")
		self.btnLjq = PushButton("节气")
		self.btnLrbn.clicked.connect(lambda : RBN(self))
		self.btnLtzs.clicked.connect(lambda : TZS(self))
		self.btnLshuo.clicked.connect(self.thisSWDXY)
		self.txtLyear.returnPressed.connect(self.thisSWDXY)
		self.btnLwang.clicked.connect(self.thisSWDXY)
		self.btnLzq.clicked.connect(self.thisQDXY)
		self.btnLjq.clicked.connect(self.thisQDXY)
		#self.btnLtzs.clicked.connect(lambda : TZS(self))
		self.cblLzr = QComboBox()
		bzsZR = ["全部", "无中闰", "闰余法", "年终闰"]
		self.cblLzr.addItems(bzsZR)
		self.cblLzr.setItemData(3, QVariant(0), Qt.UserRole - 1)
		self.cblLzr.activated.connect(lambda : Leap(self))
		self.cblZSLB.activated.connect(lambda : setLeap(self))
		self.btnLfz = PushButton("分至")
		self.btnLbj = PushButton("八节")
		self.btnLyx = PushButton("上下弦")
		self.btnLalljq = PushButton("24节气")
		self.btnMC = PushButton("月历")
		self.btnLB = PushButton("气朔")
		self.btnMC.setToolTip("古历与公历对照表")
		self.btnLyx.clicked.connect(lambda : XDXY(self))
		self.btnLfz.clicked.connect(self.thisQDXY)
		self.btnLbj.clicked.connect(self.thisQDXY)
		self.btnLalljq.clicked.connect(self.thisQDXY)
		self.btnMC.clicked.connect(lambda : monthlyCalendar(self))
		self.btnLB.clicked.connect(lambda : qishuoTable(self))
		self.labrLCK = QLabel("日历窗口")
		#self.labrLCK = PushButton('生成历谱')
		self.btnWNL = PushButton("万年历")
		self.btnWNL2 = PushButton("古历")
		self.btnWNL.clicked.connect(lambda :wnl(self))
		self.btnWNL2.clicked.connect(lambda :wnl2(self))
		self.hlay45.addWidget(self.btnLtzs)
		self.btnLtzs.setMaximumWidth(50)
		self.hlay45.addWidget(self.btnLshuo)
		self.btnLshuo.setMaximumWidth(22)
		self.hlay45.addWidget(self.btnLwang)
		self.btnLwang.setMaximumWidth(22)
		self.hlay45.addWidget(self.btnLzq)
		self.btnLzq.setMaximumWidth(38)
		self.hlay45.addWidget(self.btnLjq)
		self.btnLjq.setMaximumWidth(38)
		self.hlay45.addWidget(self.btnMC)
		self.btnMC.setMaximumWidth(38)
		self.hlay45.addWidget(self.cblLzr)
		self.cblLzr.setMaximumWidth(50)
		self.hlay46.addWidget(self.btnLrbn)
		self.btnLrbn.setMaximumWidth(50)
		self.hlay46.addWidget(self.btnLyx)
		self.btnLyx.setMaximumWidth(48)
		self.hlay46.addWidget(self.btnLfz)
		self.btnLfz.setMaximumWidth(38)
		self.hlay46.addWidget(self.btnLbj)
		self.btnLbj.setMaximumWidth(38)
		self.hlay46.addWidget(self.btnLB)
		self.btnLB.setMaximumWidth(38)
		self.hlay46.addWidget(self.btnLalljq)
		self.btnLalljq.setMaximumWidth(50)
		self.hlay471.addWidget(self.labLyear)
		self.hlay471.addWidget(self.btnLlastYear)
		self.hlay471.addWidget(self.txtLyear)
		self.hlay471.addWidget(self.btnLnextYear)
		self.hlay472.addWidget(self.labrLCK)
		self.hlay472.addWidget(self.btnWNL2)
		self.btnWNL2.setMaximumWidth(38)
		self.hlay472.addWidget(self.btnWNL)
		self.btnWNL.setMaximumWidth(50)


	def setupCalendar(self):
		self.wnlWidget.isClosed = False
		self.wnlWidget.setWindowTitle("万年历")
		self.wnlWidget.setGeometry(600, 400, 400, 800)  # 窗口启动定位
		pe1 = QPalette()
		pe1.setColor(QPalette.Window, QColor(250,255,255))  # F0FFFF、FFFAFA、FFFAF0
		self.wnlWidget.setPalette(pe1)
		self.layWNL = QGridLayout()
		self.wnlWidget.setLayout(self.layWNL)
		self.btnGL = PushButton("古历")

	def createWnlWindow(self, height, width):
		self.wnlWidget.show()
		closeWidgets(self.layWNL)
		self.gridWNL = QGridLayout()
		self.layWNL.addLayout(self.gridWNL, 0, 0)
		self.wnlWidget.setFixedSize(height, width)

	def calendarUI(self):
		self.uiType = True
		self.createWnlWindow(470, 380)
		self.gridWNL.setSpacing(0)
		self.gridWNL.setAlignment(Qt.AlignHCenter)
		self.hlayWNL = QHBoxLayout()
		self.hlayWNL.setContentsMargins(0, 0, 5, 0)
		self.gridWNL.setContentsMargins(0, 0, 5, 0)
		self.gridWNL.addLayout(self.hlayWNL, 0, 0, 1, 7)
		self.cblCentury = ComboBox()
		for i in range(startCentury, endCentury+1):
			if i < 0: self.cblCentury.addItem('BC' + str(abs(i)) + '世纪')
			elif i == 0: continue
			else: self.cblCentury.addItem(str(i) + '世纪')
		self.cblCentury.currentIndexChanged.connect(lambda : yearItems(self))
		self.cblCentury.activated.connect(lambda : displayDate(self))
		self.cblCentury.setMaximumWidth(80)
		self.cblCentury.setFocusPolicy(False)
		self.hlayWNL.addWidget(self.cblCentury)
		self.cblYear = ComboBox()
		self.cblYear.setFixedWidth(82)
		self.cblYear.setToolTip('此处可输入年份回车查找')
		self.btnLastYear = PushButton('<')
		self.btnNextYear = PushButton('>')
		self.cblYear.activated.connect(lambda : displayDate(self))
		self.cblYear.wheeled.connect(lambda :jumpYear(self))
		self.btnLastYear.clicked.connect(self.thisJumpMonth)
		self.btnNextYear.clicked.connect(self.thisJumpMonth)
		self.btnLastYear.setMaximumSize(16, 22)
		self.btnNextYear.setMaximumSize(16, 22)
		self.hlayWNL.addStretch()
		self.hlayWNL.addWidget(self.btnLastYear)
		self.hlayWNL.addWidget(self.cblYear)
		self.hlayWNL.addWidget(self.btnNextYear)
		self.cblMonth = ComboBox()
		for i in range(12):
			self.cblMonth.addItem(str(i + 1) + '月')
		self.cblMonth.setMaxVisibleItems(12)
		self.cblMonth.setFocusPolicy(False)
		self.cblMonth.setMaximumWidth(60)
		self.btnLastMonth = PushButton("<")
		self.btnNextMonth = PushButton(">")
		self.cblMonth.activated.connect(lambda : displayDate(self))
		self.cblMonth.wheeled.connect(lambda :jumpMonth(self))
		self.btnLastMonth.clicked.connect(self.thisJumpMonth)
		self.btnNextMonth.clicked.connect(self.thisJumpMonth)
		#self.btnLastMonth.clicked.connect(lambda : lastMonth(self))
		#self.btnNextMonth.clicked.connect(lambda : nextMonth(self))
		self.btnLastMonth.setMaximumSize(16, 22)
		self.btnNextMonth.setMaximumSize(16, 22)
		self.hlayWNL.addStretch()
		self.hlayWNL.addWidget(self.btnLastMonth)
		self.hlayWNL.addWidget(self.cblMonth)
		self.hlayWNL.addWidget(self.btnNextMonth)
		self.hlayWNL.addStretch()
		self.btnToday = PushButton("今日")
		self.btnToday.clicked.connect(lambda : displayDate(self, True))
		self.btnToday.setMaximumWidth(36)
		self.hlayWNL.addWidget(self.btnToday)
		self.labMonday = Label("一")
		self.labTuesday = Label("二")
		self.labWednesday = Label("三")
		self.labThursday = Label("四")
		self.labFriday = Label("五")
		self.labSaturday = Label("六")
		self.labSunday = Label("日")
		labWeeks = [self.labMonday, self.labTuesday, self.labWednesday, self.labThursday, self.labFriday, self.labSaturday, self.labSunday]
		for i in range(7):
			self.gridWNL.addWidget(labWeeks[i], 1, i)  # 空2行
			labWeeks[i].setMaximumHeight(40)
		self.lab00, self.lab01, self.lab02, self.lab03, self.lab04, self.lab05, self.lab06 = Label(), Label(), Label(), Label(), Label(), Label(), Label()
		self.lab10, self.lab11, self.lab12, self.lab13, self.lab14, self.lab15, self.lab16 = Label(), Label(), Label(), Label(), Label(), Label(), Label()
		self.lab20, self.lab21, self.lab22, self.lab23, self.lab24, self.lab25, self.lab26 = Label(), Label(), Label(), Label(), Label(), Label(), Label()
		self.lab30, self.lab31, self.lab32, self.lab33, self.lab34, self.lab35, self.lab36 = Label(), Label(), Label(), Label(), Label(), Label(), Label()
		self.lab40, self.lab41, self.lab42, self.lab43, self.lab44, self.lab45, self.lab46 = Label(), Label(), Label(), Label(), Label(), Label(), Label()
		self.lab50, self.lab51, self.lab52, self.lab53, self.lab54, self.lab55, self.lab56 = Label(), Label(), Label(), Label(), Label(), Label(), Label()
		self.labs = [[self.lab00, self.lab01, self.lab02, self.lab03, self.lab04, self.lab05, self.lab06],
		        [self.lab10, self.lab11, self.lab12, self.lab13, self.lab14, self.lab15, self.lab16],
		        [self.lab20, self.lab21, self.lab22, self.lab23, self.lab24, self.lab25, self.lab26],
		        [self.lab30, self.lab31, self.lab32, self.lab33, self.lab34, self.lab35, self.lab36],
		        [self.lab40, self.lab41, self.lab42, self.lab43, self.lab44, self.lab45, self.lab46],
		        [self.lab50, self.lab51, self.lab52, self.lab53, self.lab54, self.lab55, self.lab56], ]
		for i in range(6):
			for j in range(7):
				self.labs[i][j].setFixedSize(48, 48)
				self.labs[i][j].clicked.connect(lambda : displayDate(self))
				self.gridWNL.addWidget(self.labs[i][j], i + 2, j)
		self.hlayGL = QHBoxLayout()
		self.gridWNL.addLayout(self.hlayGL, 0, 7, 1, 1)
		self.wnlHelp = PushButton("帮助")
		self.hlayGL.addWidget(self.wnlHelp)
		self.wnlHelp.setMaximumWidth(40)
		self.wnlHelp.clicked.connect(lambda : wnlHint(self))
		self.btnGL = PushButton("古历")
		self.btnGL.clicked.connect(lambda :wnl2(self))
		self.btnGL.setMaximumWidth(40)
		self.hlayGL.addWidget(self.btnGL)
		self.labInfo = QLabel()
		self.labHint = Label()
		self.labHint.setAlignment(Qt.AlignLeft)
		self.labHint.setStyleSheet("QLabel {font: 12px; border:0px solid; }")
		self.labInfo.setStyleSheet("QLabel{ font:14px; }")
		self.labInfo.setAlignment(Qt.AlignHCenter)
		self.labInfo.setContentsMargins(0, 10, 5, 6)
		#self.labInfo.setStyleSheet('QLabel {background-color:red}')
		self.labInfo.setWordWrap(True)
		self.labHint.setWordWrap(True)
		self.labInfo.setFixedWidth(115)
		self.labHint.setFixedSize(115, 48)
		self.gridWNL.addWidget(self.labInfo, 1, 7, 6, 1)
		self.gridWNL.addWidget(self.labHint, 7, 7, 1, 1)

	def glUI(self):
		self.uiType = False
		self.createWnlWindow(640, 500)
		self.gridWNL.setSpacing(2)
		self.gridGL = QGridLayout()
		self.hlayEra = QHBoxLayout()
		self.hlayInfo = QHBoxLayout()
		self.labEraName = QLabel()
		self.labEraName.setMaximumHeight(36)
		self.labEraName.setAlignment(Qt.AlignTop)
		self.labEraName.setWordWrap(True)
		self.gridWNL.addWidget(self.labEraName, 0, 0, 1, 11)
		self.gridWNL.addLayout(self.hlayEra, 1, 0, 1, 11)
		self.gridWNL.addLayout(self.hlayInfo, 8, 0, 1, 11)
		self.cblDynasty = ComboBox()
		self.cblDynasty.setFocusPolicy(False)
		for i in range(len(dynasties)):
			if 2 < i < 28:
				self.cblDynasty.addItem(dynasties[i][0])
		self.cblDynasty.setMaxVisibleItems(25)
		self.cblDynasty.setFixedWidth(54)
		self.cblEmperor = ComboBox()
		self.cblEmperor.setMaxVisibleItems(25)
		self.cblEmperor.setFocusPolicy(False)
		self.cblEmperor.setMaximumWidth(66)
		self.btnLastEmperor = PushButton("<")
		self.btnNextEmperor = PushButton(">")
		self.btnLastEmperor.clicked.connect(lambda : lastEmperor(self))
		self.btnNextEmperor.clicked.connect(lambda : nextEmperor(self))
		#self.cblDynasty.currentIndexChanged.connect(lambda: self.cblEmperor.setSizeAdjustPolicy(QComboBox.AdjustToContents))
		s#elf.cblEmperor.setFixedWidth(70)
		self.btnLastEmperor.setMaximumSize(16, 22)
		self.btnNextEmperor.setMaximumSize(16, 22)
		self.cblReign = ComboBox()
		self.cblReign.setMaxVisibleItems(25)
		self.cblReign.setMaximumWidth(138)
		self.cblReign.setSizeAdjustPolicy(QComboBox.AdjustToContents)
		self.cblReign.setFocusPolicy(False)
		#self.cblReign.currentIndexChanged.connect(lambda : self.cblReign.lineEdit().setCursorPosition(0))
		self.btnLastEra = PushButton("<")
		self.btnNextEra = PushButton(">")
		self.btnLastEra.clicked.connect(lambda : lastReign(self))
		self.btnNextEra.clicked.connect(lambda : nextReign(self))
		self.btnLastEra.setMaximumSize(16, 22)
		self.btnNextEra.setMaximumSize(16, 22)
		self.cblYue = ComboBox()
		self.cblYue.setMaximumWidth(91)
		# self.cblYue.setSizeAdjustPolicy(QComboBox.AdjustToContents)
		self.cblYue.setMaxVisibleItems(13)
		self.cblYue.setFocusPolicy(False)
		self.btnLastYue = PushButton("<")
		self.btnNextYue = PushButton(">")
		self.btnLastYue.clicked.connect(lambda : lastYue(self))
		self.btnNextYue.clicked.connect(lambda : nextYue(self))
		self.btnLastYue.setMaximumSize(16, 22)
		self.btnNextYue.setMaximumSize(16, 22)
		self.editSearch = QLineEdit()
		self.editSearch.setPlaceholderText("输入年号或公历查找")
		self.editSearch.returnPressed.connect(lambda :searchEraname(self))
		self.cplEra2 = QCompleter(single_eranames[1104:])
		self.cplEra2.setFilterMode(Qt.MatchContains)
		self.cplEra2.activated.connect(lambda : searchEraname(self))
		self.editSearch.setCompleter(self.cplEra2)
		self.editSearch.setFixedWidth(130)
		self.hlayEra.setContentsMargins(0, 1, 0, 10)
		self.hlayEra.addWidget(self.cblDynasty)
		#self.hlayEra.addStretch(1)
		self.hlayEra.addWidget(self.btnLastEmperor)
		self.hlayEra.addWidget(self.cblEmperor)
		self.hlayEra.addWidget(self.btnNextEmperor)
		#self.hlayEra.addStretch(1)
		self.hlayEra.addWidget(self.btnLastEra)
		self.hlayEra.addWidget(self.cblReign)
		self.hlayEra.addWidget(self.btnNextEra)
		#self.hlayEra.addStretch(1)
		self.hlayEra.addWidget(self.btnLastYue)
		self.hlayEra.addWidget(self.cblYue)
		self.hlayEra.addWidget(self.btnNextYue)
		#self.hlayEra.addStretch(4)
		self.hlayEra.addWidget(self.editSearch)
		self.lab00, self.lab01, self.lab02, self.lab03, self.lab04, self.lab05, self.lab06, self.lab07, self.lab08, self.lab09, self.lab0a = Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label()
		self.lab10, self.lab11, self.lab12, self.lab13, self.lab14, self.lab15, self.lab16, self.lab17, self.lab18, self.lab19, self.lab1a = Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label()
		self.lab20, self.lab21, self.lab22, self.lab23, self.lab24, self.lab25, self.lab26, self.lab27, self.lab28, self.lab29, self.lab2a = Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label()
		self.lab30, self.lab31, self.lab32, self.lab33, self.lab34, self.lab35, self.lab36, self.lab37, self.lab38, self.lab39, self.lab3a = Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label()
		self.lab40, self.lab41, self.lab42, self.lab43, self.lab44, self.lab45, self.lab46, self.lab47, self.lab48, self.lab49, self.lab4a = Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label()
		self.lab50, self.lab51, self.lab52, self.lab53, self.lab54, self.lab55, self.lab56, self.lab57, self.lab58, self.lab59, self.lab5a = Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label(), Label()
		self.lab6a, self.lab7a = Label(), Label()
		self.labs = [[self.lab00, self.lab01, self.lab02, self.lab03, self.lab04, self.lab05, self.lab06, self.lab07, self.lab08, self.lab09, self.lab0a],
			        [self.lab10, self.lab11, self.lab12, self.lab13, self.lab14, self.lab15, self.lab16, self.lab17, self.lab18, self.lab19, self.lab1a],
			        [self.lab20, self.lab21, self.lab22, self.lab23, self.lab24, self.lab25, self.lab26, self.lab27, self.lab28, self.lab29, self.lab2a],
			        [self.lab30, self.lab31, self.lab32, self.lab33, self.lab34, self.lab35, self.lab36, self.lab37, self.lab38, self.lab39, self.lab3a],
			        [self.lab40, self.lab41, self.lab42, self.lab43, self.lab44, self.lab45, self.lab46, self.lab47, self.lab48, self.lab49, self.lab4a],
			        [self.lab50, self.lab51, self.lab52, self.lab53, self.lab54, self.lab55, self.lab56, self.lab57, self.lab58, self.lab59, self.lab5a],
					[0, self.lab6a], [0, self.lab7a]]
		for i in range(8):
			for j in range(11):
				if i > 5 and j != 1: continue
				if i % 2 == 1: self.labs[i][j].setAlignment(Qt.AlignHCenter)
				if i % 2 == 0 and j == 0: self.labs[i][j].setFixedSize(60, 24)
				elif i % 2 == 1 and j == 0: self.labs[i][j].setFixedSize(60, 72)
				elif i % 2 == 0: self.labs[i][j].setFixedSize(52, 24)
				else: self.labs[i][j].setFixedSize(52, 72)
				if i % 2 == 1 and j != 0: self.labs[i][j].clicked.connect(lambda : displayDateInfo(self))
				self.gridWNL.addWidget(self.labs[i][j], i + 2, j)
		self.labYearInfo = QLabel()
		self.labYearInfo.setAlignment(Qt.AlignCenter)
		# self.labYearInfo.setStyleSheet("QLabel { qproperty-alignment: 'AlignBottom | AlignHCenter'; }")
		self.labDateInfo = QLabel()
		self.labDateInfo.setWordWrap(True)
		self.labDateInfo.setAlignment(Qt.AlignTop)
		self.labDateInfo.setMaximumHeight(10000)
		self.scrollArea = QScrollArea()
		self.scrollArea.setStyleSheet("QScrollArea { background-color: rgb(250,255,255); border:1px solid; border-radius: 3px; border-color:#1E90FF }")
		self.labDateInfo.setStyleSheet("QLabel {font: 12px; border:1px solid; border-radius: 3px; border-color:#1E90FF }")
		self.scrollArea.setWidget(self.labDateInfo)
		self.scrollArea.setWidgetResizable(True)
		self.cblCompare = QComboBox()
		self.cblCompare.addItems(['无', '实历'])
		#self.cblCompare.setItemData(0, QVariant(0), Qt.UserRole - 1)
		self.cblCompare.activated.connect(lambda :displayYue(self))
		self.cblCompare.activated.connect(lambda :displayDateInfo(self))
		self.cblCompare.setMaximumWidth(50)
		self.rbAll = QRadioButton("当前")
		self.rbAll.setChecked(False)
		self.rbAll.toggled.connect(lambda: self.rbAll.setText(['当前', '全部'][self.rbAll.isChecked()]))
		self.rbAll.toggled.connect(lambda :displayDateInfo(self))
		self.btnHelp = PushButton('帮 助')
		self.btnHelp.clicked.connect(lambda : self.labDateInfo.setText('    本历表计划起自太初元年，下讫宣统三年。暂更至五代末。'
								 '\n    ************************ 输入查找格式 ************************'
								'\n    在本页面“输入年号或公历查找”文本框内，依照以下格式输入完成后按回车键自动跳转到相关历日。'
								 '\n    按年号查找：输入年号名称，可自动跳转朝代序中第一个出现该年号的朝代。若已选定朝代中含该年号，优先跳转到本朝代内。'
								'\n    按年号精确查找：输入年号中需含朝代帝号年号及年序全部内容，可精确跳转到该年号。输入框根据输入自动弹出提示，可进行选择。'
								'\n    按公历年查找：输入数字，公元前可用“-”号或“BC”或“bc”表示，如公元前104年输入：-104或bc104。'
								 '\n    按公历日期查找：输入公历日期，年月日可用“.”或“/”或“-”间隔，如公元元年1月1日输入：1.1.1或1/1/1或1-1-1。'
									'\n    ************************** 界面说明 **************************'								   
		                          '\n    本历表按月显示，如需获取全年日期对应公历，请返回主程序的步中朔框，手动选择历法后点击“月历”按钮。'
								  '\n    本历表已根据建正修改月名，无需自行转换。并在本栏左侧提示所用建正和置闰情况。本历表月名干支起自每月初一，不同于万年历起自节气。'								   
		                          '\n    本界面分三大行，每大行各分4行。其中第四行选取对比历法时显示。'
		                         '\n    第一行显示干支，第二行显示对应日期（最左列为当时行用历法名），第三行显示对应公历日期。'
		                         '\n    第四行可在对比列表中选取任一朝代或实历作为对比，版式限制只支持选取一种。点选“当前”改为“全部”可在本栏对比全部朝代历日信息。'
								 '\n    首行显示公历年一般所对应的年号信息，即未根据相应月份截断。本栏对比信息中的年号已根据月份截断，故与首行信息略有不同。'
								  '\n    戊寅历、麟德历（619-728年）惊蛰与雨水依历顺序倒换，太初历可能也倒换。为防混乱本表皆未做倒换，仍按先雨水后惊蛰之次序。'								   
												'\n    ************************** 进朔相关 **************************'								   
					 			'\n    史料朔闰不会与历表完全对应，如果农历日期相同而干支不同，可根据对应干支确定公历日期。'
								 '\n    本历表麟德历708-716及721-728进朔，其余不进朔；大衍历729-734不进朔其余进朔。唐神功元年及开元十二年并依史料移置朔闰。'
								 '\n    月表提供每月朔干支信息方便，干支后加“*”号表示该月已进朔。本历表亦用退弦望术，但未做任何标示。'
								 '\n    若某年用进朔法，则本栏日期信息首行有“干支a.b≥c”项，干支为不进朔时朔干支，若与本月朔不同，表示本月已进朔。a为大余值（即干支序，甲子为0），b为小余值，c为进朔临界值，'
								 '≥或＜号为b与c的比较符，若为≥，即仅按计算结果应进朔，此项用作参考。凡日食可见者（古历计算结果非实际情况）不用进朔，本表暂未根据日食情况修改。'
								 '\n    本历表的详细说明见所附文件：历表与《二十史朔闰表》差异等说明。'))
		self.btnCE = PushButton("万年历")
		self.btnCE.clicked.connect(lambda: wnl(self))
		self.btnHelp.setMaximumWidth(50)
		self.btnCE.setMaximumWidth(50)
		self.gridWNL.addWidget(self.labYearInfo, 8, 0, 4, 1)
		self.gridWNL.addWidget(self.scrollArea, 8, 1, 4, 8)
		self.gridWNL.addWidget(self.cblCompare, 9, 9, 1, 1)
		self.gridWNL.addWidget(self.rbAll, 8, 9, 1, 1)
		self.gridWNL.addWidget(self.btnHelp, 10, 9, 1, 1)
		self.gridWNL.addWidget(self.btnCE, 11, 9, 1, 1)
		self.gridWNL.addWidget(self.lab6a, 8, 10, 1, 1)
		self.gridWNL.addWidget(self.lab7a, 9, 10, 3, 1)
		# 初始化设置
		self.updateERYY()
		self.cblDynasty.activated.connect(self.updateERYY)
		self.cblEmperor.activated.connect(self.updateRYY)
		self.cblReign.activated.connect(self.updateYY)
		self.cblYue.activated.connect(lambda: updateYue(self))


	def windowChange(self, ui):
		ui.activateWindow()
		ui.setWindowState(ui.windowState() & ~Qt.WindowMinimized | Qt.WindowActive)
		ui.showNormal()

	@pyqtSlot()
	def on_btnCopy_clicked(self):
		self.edit.selectAll()
		self.edit.copy()

	def updateYY(self):
		addYueItems(self)
		updateYue(self)

	def updateRYY(self):
		addReignItems(self)
		addYueItems(self)
		updateYue(self)

	def updateERYY(self):
		addEmperorItems(self)
		addReignItems(self)
		addYueItems(self)
		updateYue(self)


	''' 连接类外的有参函数作为槽函数'''
	def thisGanZhiTable(self, flag):
		GanZhiTable(self, flag)

	def thisJieQiTable(self, flag):
		JieQiTable(self, flag)

	def thisSolarTime(self, flag):
		SolarTime(self, flag)

	def thisSunRxdQjd(self, flag):
		if flag: SunRXD(self)
		else: SunQJD(self)

	def thisInfo(self, flag):
		if flag: lbInfo(self)
		else:
			basicInfo(self)
			self.edit.append("")

	''' 多控件共用函数'''
	def thisStarJD(self):
		if self.sender() == self.btnMassionLong:
			StarJD(self, 0)
		elif self.sender() == self.btnStarLong:
			StarJD(self, 1)

	def thisStarQJD(self):
		if self.sender() == self.btnMassionLat:
			StarQJD(self, 0)
		elif self.sender() == self.btnStarLat:
			StarQJD(self, 1)

	def thisFindEclipse(self):
		if self.sender().text() == '日食':
			FastFindEclipse(self, 0)
		elif self.sender().text() == '月食':
			FastFindEclipse(self, 1)
		elif self.sender().text() == '食' or self.sender() == self.txtEditScope:
			FastFindEclipse(self, 2)

	def thisPlanetJD(self):
		if self.sender().text() == '星次':
			PlanetJD(self, 0)
		elif self.sender().text() == '入宿度':
			PlanetJD(self, 1)

	def thisHDZX(self):
		if self.sender().text() == '旦':
			HDZX(self, 0)
		elif self.sender().text() == '昏':
			HDZX(self, 1)
		elif self.sender().text() == '夜半':
			HDZX(self, 3)

	def thisHdzxYear(self):
		if self.sender().text() == '昏':
			hdzxYear(self, 0)
		elif self.sender().text() == '旦':
			hdzxYear(self, 1)

	def thisSWDXY(self):
		if self.sender().text() == '朔' or self.sender() == self.txtLyear:
			SWDXY(self, 0)
		elif self.sender().text() == '望':
			SWDXY(self, 1)

	def thisQDXY(self):
		if self.sender().text() == '中气':
			QDXY(self, 0)
		elif self.sender().text() == '节气':
			QDXY(self, 1)
		elif self.sender().text() == '24节气':
			QDXY(self, 2)
		elif self.sender().text() == '分至':
			QDXY(self, 3)
		elif self.sender().text() == '八节':
			QDXY(self, 4)

	def thisJumpMonth(self):
		if self.sender() == self.btnLastMonth:
			lastMonth(self)
		elif self.sender() == self.btnNextMonth:
			nextMonth(self)
		elif self.sender() == self.btnLastYear:
			lastYear(self)
		elif self.sender() == self.btnNextYear:
			nextYear(self)
		displayDate(self)

	def setLYSS(self):
		LYSSstate.pop()
		LYSSstate.append([False,True][self.rbLYSS.isChecked()])


