from BasicFunc import *
from Data import *
from AstroCalc.StarTable import *

SiderealPeriod = {'火': 686.980, '金': 224.70, '水': 87.970, '木': 4332.59, '土': 10759.22}

####################   入宿度   ####################
'''
# 严格按28宿排序，不处理岁差所造成的次宿经度小于本宿，可能得到异常结果
def rxd_calc(lamda): # 计算入宿度
	lamda %= 360
	for i in range(28):
		if esbx[i].ra <= lamda < esbx[(i+1)%28].ra:
			break
		elif esbx[i].ra > esbx[(i+1)%28].ra: # 边界循环处理
			if esbx[i].ra <= lamda < 360:
				break
			if 0 <= lamda < esbx[(i+1)%28].ra:
				lamda += 360
				break
	srx = '入' + esbx[i].name + '宿'  # 所入宿
	rxd = lamda - esbx[i].ra # 入宿度（赤道）
	return srx, rxd  # 古度表示：rxd / gdzh
'''

def rxd_calc(lamda): # 计算入宿度
	lamda %= 360
	for i in range(28):
		last_star = esbx[i]
		next_star = esbx[(i + 1) % 28]
		if last_star.ra > next_star.ra and abs(last_star.ra - next_star.ra) < 180:  # 岁差引起的倒置
			last_star = esbx[(i + 1) % 28]
			next_star = esbx[i]
		if last_star.ra <= lamda < next_star.ra:
			break
		elif last_star.ra > next_star.ra:  # 边界循环处理
			if last_star.ra <= lamda < 360:
				break
			if 0 <= lamda < next_star.ra:
				lamda += 360
				break
	srx = '入' + last_star.name + '宿'  # 所入宿
	rxd = lamda - last_star.ra # 入宿度（赤道）
	return srx, rxd  # 古度表示：rxd / gdzh

def rcd_calc(lamda, tpye):
	for i in range(12):
		xc1 = (i * 30 - 105) % 360  # 起星纪
		xc2 = (xc1 + 30) % 360
		if tpye == 0:  # 0为黄经，1为赤经
			e = 84381.448 / 3600
			xc1 = ec2eq(xc1, 0, e)[0]
			xc2 = ec2eq(xc2, 0, e)[0]
		if xc1 <= lamda < xc2:
			break # 找到该星次
		elif xc1 > xc2:  # 降娄（345-15）
			if xc1 <= lamda:  # 345 < λ < 360
				break
			elif lamda < xc2:  # 0 < λ < 15
				lamda += 360
				break
	rcd = lamda - xc1  # 入次度
	src = '入' + xingci[i]
	return src, rcd

####################   行星现象   ####################
phenomena_terms = {
		'水':[
			[[0.0545, -6.2008, -3.2750, 0.4737, 0.8111, 0.0037, -0.1768, -0.0211, 0.0326, 0.0083, -0.0040],
		      [0.0002, 0.0074, -0.0197, -0.0052, 0.0033, 0.0018, '', -0.0004, -0.0003, 0.0001, 0.0001],
		      ['', 0.00003, 0.00001, -0.00001, -0.00002, '', 0.00001, '', '', '', '']],                         # 0 下合
		     [[-0.0548, 7.3894, 3.2200, 0.8383, 0.9666, 0.0770, 0.2758, -0.0128, 0.0734, -0.0122, 0.0173],
		      [-0.0002, -0.01, 0.0197, -0.0064, 0.0039, -0.0026, 0.0002, -0.0008, -0.0004, -0.0002, -0.0002],
		      ['', -0.00003, -0.00001, -0.00001, -0.00003, '', -0.00002, '', -0.00001, '', '']],                # 1 下合
		     [[-21.6101, -1.9803, 1.4151, 0.5528, 0.2905, -0.1121, -0.0098, 0.0192, 0.0111, -0.0061, -0.0032],
		      [0.0002, -0.006, -0.0072, -0.0005, 0.0034, -0.0001, -0.0015, '', 0.0004, '', -0.0001],
		      ['', 0.00001, '', -0.00001, -0.00001, 0.00001, 0.00001, '', '', '', '', '']],                     # 2 东大距时间
		     [[21.6249, 0.1306, -2.7661, 0.2438, 0.5767, 0.1041, -0.0184, -0.0051, 0.0048, 0.0026, 0.0037],
		      [-0.0002, 0.0065, -0.0011, -0.0024, 0.0023, '', 0.0007, -0.0001, 0.0001, '', ''],
		      ['', '', 0.00001, -0.00001, '', '', '', '', '', '', '']],                                        # 3 西大距时间
		     [[11.1343, -3.9137, -3.3861, 0.5222, 0.5929, -0.0593, -0.1733, -0.0053, 0.0476, 0.007, -0.0115],
		      [-0.0001, 0.0073, -0.0128, -0.004, 0.0039, 0.0018, -0.0007, -0.0006, -0.0001, 0.0002, 0.0001],
		      ['', 0.00002, 0.00001, -0.00002, -0.00002, '', 0.00001, '', '', '', '']],                         # 4 逆留
		     [[-11.0761, -4.7321, -1.3230, 0.2270, 0.7184, 0.0638, -0.1655, -0.0395, 0.0247, 0.0131, 0.0008],
		      [0.0003, 0.0023, -0.0156, -0.0046, 0.0013, 0.0016, 0.0007, -0.0003, -0.0006, '', 0.0002],
		      ['', 0.00002, '', '', -0.00002, '', '', '', '', '', '']],                                         # 5 顺留
		     [[22.4697, -4.2666, -1.8537, 0.3598, -0.068, -0.0524, 0.0052, 0.0107, -0.0013, -0.0021, 0.0003],
		      ['', 0.0054, -0.0137, 0.0008, 0.0026, -0.0003, -0.0006, 0.0001, 0.0001, '', ''],
		      ['', 0.00002, '', -0.00001, '', '', '', '', '', '', '']],                                         # 6 东大距距角
		     [[22.4143, 4.3651, 2.3787, 0.2674, -0.3873, -0.0369, 0.0017, 0.0059, 0.0061, 0.0007, -0.0011],
		      [-0.0001, -0.0048, 0.0121, 0.0022, 0.0008, -0.0001, -0.0001, '', 0.0001, '', ''],
		      ['', -0.00002, -0.00001, '', 0.00001, '', '', '', '', '', '']]],                                  # 7 西大距距角
		'金':[
			[[-0.0096, 2.0009, 0.5980, 0.0967, 0.0913, 0.0046, 0.0079],
			 [0.0002, -0.0033, -0.0104, -0.0018, 0.0009, -0.0002, 0.0001],
			 [-0.00001, -0.00001, 0.00001, -0.00003, -0.00002, '', '']],                                         # 0 下合
			[[0.0099, 4.1991, -0.6095, 0.25, 0.0063, 0.0232, 0.0031],
			 [-0.0002, -0.0121, 0.0102, -0.0028, 0.0025, -0.0005, 0.0004],
			 [-0.00001, -0.00003, -0.00002, -0.00003, -0.00002, -0.00001, '']],                                  # 1 下合
			[[-70.76, 1.0282, 0.2761, -0.0438, 0.166, 0.0036, -0.0011],
			 [0.0002, -0.001, -0.006, -0.0023, -0.0037, 0.0001, ''],
			 [-0.00001, -0.00001, '', 0.00002, -0.00004, '', 0.00001]],                                          # 2 东大距时间
			[[70.7462, 1.1218, 0.4538, 0.132, -0.0702, 0.0062, 0.0015],
			 ['', -0.0025, -0.0066, 0.002, 0.0022, -0.0001, ''],
			 [-0.00001, -0.00001, '', -0.00003, 0.00004, '', -0.00001]],                                         # 3 西大距时间
			[[-21.0672, 1.9396, 1.0727, 0.0404, 0.1305, -0.0007, 0.0098],
			 [0.0002, -0.0029, -0.0102, -0.0023, -0.0004, -0.0002, ''],
			 [-0.00001, -0.00001, '', -0.00001, -0.00003, '', '']],                                              # 4 逆留
			[[21.0623, 1.9913, -0.0407, 0.1351, 0.0303, 0.0089, 0.0043],
			 ['', -0.004, -0.0077, -0.0009, 0.0019, -0.0002, 0.0001],
			 [-0.00001, -0.00001, '', -0.00004, '', '', '']],                                                    # 5 顺留
			[[46.3173, 0.6916, 0.6676, 0.0309, 0.0036, '', ''],
			 [0.0001, -0.0024, -0.0045, -0.0002, -0.0001, '', ''],
			 ['', '', '', '', '', '', '']],                                                                      # 6 东大距距角
			[[46.3245, -0.5366, 0.3097, -0.0163, -0.0075, '', ''],
			 ['', -0.0003, 0.0016, '', 0.0001, '', ''],
			 ['', 0.00001, -0.00001, '', '', '', '']]],                                                          # 7 西大距距角
		'火':[
			[[-0.3088, -17.6965, 18.3131, -0.2162, -4.5028, 0.8987, 0.7666, -0.3636, 0.0402, 0.0737, -0.098],
			 [0.00002, 0.00005, -0.00006, -0.00001, 0.00007, -0.00002, -0.00003, 0.00002, '', '', ''],
			 [0.00002, 0.00005, -0.00006, -0.00001, 0.00007, -0.00002, -0.00003, 0.00002, '', '', '']],             # 0 冲日
			[[0.3102, 9.7273, -18.3195, -1.6488, -2.6117, -0.6827, 0.0281, -0.0823, 0.1584, 0.027, 0.0433],
			 [-0.0001, -0.0156, -0.0467, -0.0133, -0.0020, -0.0026, 0.0035, 0.0006, 0.0013, 0.0005, ''],
			 [0.00001, 0.00001, 0.00009, 0.00001, 0.00004, 0.00001, 0.00001, 0.00001, '', '', '']],                 # 1 合日
			[''],               [''],                   #  无大距
			[[-37.079, -20.0651, 14.5205, 1.1737, -4.255, 0.4897, 1.1151, -0.3636, -0.1769, 0.1437, -0.0383],
			 [-0.0009, 0.02228, 0.0504, -0.0169, -0.0075, 0.0074, -0.0021, -0.0020, 0.0028, -0.0004, -0.0016],
			 [0.00002, 0.00004, -0.00001, '', 0.00008, -0.00001, -0.00005, 0.00001, 0.00002, '', '']],              # 4 逆留
			[[36.7191, -12.6163, 20.1218, -1.6360, -3.9657, 1.1546, 0.2888, -0.3128, 0.2513, -0.0021, -0.1497],
			 [0.0016, 0.0417, 0.0379, -0.019, 0.0045, 0.0029, -0.0073, 0.0017, 0.0026, -0.0016, -0.0006],
			 [0.00003, -0.00001, -0.00006, '', 0.00007, -0.00003, -0.00002, 0.00002, -0.00002, '', '']]],           # 5 顺留
		'木':[
			[[-0.1029, -1.9658, 6.1537, -0.2081, -0.1116, 0.0074, -0.0097, 0, 0.3642],
			 ['', -0.0056, 0.021, -0.0013, -0.001, 0.0001, -0.0001, 0.0144, -0.0019],
			 [-0.00009, 0.00007, -0.00006, '', '', '', '', -0.00008, -0.00029]],                                     # 0 冲日
			[[0.01027, -2.2637, -6.1540, -0.2021, 0.1310, 0.0086, 0.0087, 0, 0.3642],
			 [0.0002, 0.0163, -0.021, -0.0017, -0.0008, '', 0.0002, 0.0144, -0.0019],
			 [-0.00009, -0.00003, 0.00008, 0.00001, '', '', '', -0.00008, -0.00029]],                                 # 1 合日
			[''],               [''],
			[[-60.367, -2.3144, 6.7439, -0.2259, -0.1497, 0.0105, -0.0098, 0, 0.3642],
			 [-0.0001, -0.0124, 0.0166, -0.001, -0.0014, 0.0001, '', 0.0144, -0.0019],
			 [-0.00009, 0.00007, -0.00006, '', '', '', '',-0.00008, -0.00029]],                                       # 4 逆留
			[[60.3023, 0.3506, 5.3635, -0.1872, -0.0037, 0.0012, -0.0096, 0, 0.3642],
			 [0.0002, -0.0034, 0.0247, -0.0016, -0.0005, 0.0001, -0.0001, 0.0144, -0.0019],
			 [-0.00009, 0.00004, -0.00007, '', '', '', '',-0.00008, -0.00029]]],                                       # 5 顺留
		'土':[
			[[-0.0209, 4.5795, 1.1462, 0.0985, 0.0733, 0.0025, 0.0050, 0, -0.8510, 0, 0.2397, 0, 0.1245, 0, 0.0477],
			 [0.0006, -0.0312, -0.0351, -0.0015, -0.0031, -0.0001, -0.0002, -0.0337, 0.0044, -0.0064, -0.0012, -0.0010, 0.0006, 0.0024, -0.0005],
			 [0.00023, -0.00017, 0.00011, '', 0.00001, '', '', 0.00018, 0.00068, 0.00004, -0.00008, '', '', -0.00003, -0.00006]],                       # 0 冲日
			[[0.0172, -8.5885, -1.1470, 0.3331, 0.1145, -0.0169, -0.0109, 0, -0.8510, 0, 0.2397, 0, 0.1245, 0, 0.0477],
			 [ -0.0006, 0.0411, 0.0352, -0.0034, -0.0045, 0.0002, 0.0004, -0.0337, 0.0044, -0.0064, -0.0012, -0.001, 0.0006, 0.0024, -0.0005],
			 [0.00023, 0.00020, -0.00011, -0.00001, 0.00002, '', '', 0.00018, 0.00068, 0.00004, -0.00008, '', '', -0.00003, -0.00006]],                 # 1 合日
			[''],               [''],                   #  无大距
			[[-68.8840, 5.5452, 3.0727, 0.1101, 0.1654, 0.001, 0.0095, 0, -0.851, 0, 0.2397, 0, 0.1245, 0, 0.0477],
			 [0.0009, -0.0279, -0.0430, -0.0006, -0.0043, 0.0001, -0.0003, -0.0337, 0.0044, -0.0064, -0.0012, -0.001,0.0006, 0.0024, -0.0005],
			 [0.00023, -0.00020, 0.00007, -0.00001, 0.00001, '', '', 0.00018, 0.00068, 0.00004, -0.00008, '', '', -0.00003, -0.00006]],
			[[-68.8720, 5.9399, -0.7998, 0.1738, -0.0039, 0.0073, 0.0020, 0, -0.851, 0, 0.2397, 0, 0.1245, 0, 0.0477],                                  # 4 逆留
			 [-0.0007, -0.04, -0.0266, -0.0032, -0.0024, -0.0002, -0.0002, -0.0337, 0.0044, -0.0064, -0.0012, -0.001, 0.0006, 0.0024, -0.0005],
			 [0.00023, -0.00015, 0.00014, '', 0.00001, '', '', 0.00018, 0.00068, 0.00004, -0.00008, '', '', -0.00003, -0.00006]]]                      # 5 顺留
	}

def Phenomena(T, p, kind, correct):
	dt = 0 # 时间修正量
	for i in range(len(phenomena_terms[p][kind][0])):
		x = 0
		for j in range(3):
			if phenomena_terms[p][kind][j][i] != '':
				x += phenomena_terms[p][kind][j][i] * pow(T,j)
		dt += x * correct[i]
	if kind in [2, 3]:
		kind += 4
		el = 0  # 距角（黄经）
		for i in range(len(phenomena_terms[p][kind][0])):
			x = 0
			for j in range(3):
				if phenomena_terms[p][kind][j][i] != '':
					x += phenomena_terms[p][kind][j][i] * pow(T,j)
			el += x * correct[i]
		return dt, el
	else:
		return dt

def pp(Y, p, type): # 行星现象：type=0为冲/下合，type=1为合/上合，type=2为大距，type=3为留（黄经最小）
	if Y < 0: Y += 1
	kind = type
	if type > 1:
		if type == 2: kind = 2 # 大距
		if type == 3: kind = 4 # 留
		type = 0 # 使用下合/冲数据
	A = {'水':[2451612.023,2451554.084], '金':[2451996.706,2451704.746], '火':[2452097.382,2451707.414], '木':[2451870.628,2451671.186], '土':[2451870.170,2451681.124]}
	B = {'水':115.8774771, '金':583.921361, '火':779.936104, '木':398.884046, '土':378.091904}
	M0 = {'水':[63.5867,6.4822], '金':[82.7311,154.9745], '火':[181.9573,157.6047], '木':[318.4681,121.8980], '土':[318.0172,131.6934]}
	M1 = {'水':114.2088742, '金':215.513058, '火':48.705244, '木':33.140229, '土':12.647487}
	k = math.floor((365.2425*Y + 1721060 - A[p][type]) / B[p])+1
	JDE0 = A[p][type] + k * B[p]
	M = (M0[p][type] + k*M1[p]) % 360
	T = (JDE0 - 2451545) / 36525
	correct = [1, sin(M), cos(M), sin(2*M), cos(2*M), sin(3*M), cos(3*M), sin(4*M), cos(4*M), sin(5*M), cos(5*M)]
	if p in ['木','土']:
		a = (82.74 + 40.76 * T) % 360
		if p == '木':
			correct = [1, sin(M), cos(M), sin(2 * M), cos(2 * M), sin(3 * M), cos(3 * M), sin(a), cos(a)]
		else:
			b = (29.86 + 1181.36 * T) % 360
			c = (14.13 + 590.68 * T) % 360
			d = (220.02 + 1262.87 * T) % 360
			correct = [1, sin(M), cos(M), sin(2*M), cos(2*M), sin(3*M), cos(3*M), sin(a), cos(a), sin(b), cos(b), sin(c), cos(c), sin(d), cos(d)]
	if kind == 0: # 下合/冲
		dt = Phenomena(T, p, kind, correct)
		JDE = JDE0 + dt
		return JDE
	elif kind == 1: # 上合/合
		dt = Phenomena(T, p, kind, correct)
		JDE = JDE0 + dt
		return JDE
	elif kind == 2:
		dt1, el1 = Phenomena(T, p, kind, correct)   # 东大距
		dt2, el2 = Phenomena(T, p, kind+1, correct) # 西大距
		JDE1 = JDE0 + dt1
		JDE2 = JDE0 + dt2
		return td2date(JDE1), round(el1,2), td2date(JDE2),round(el2,2)
	elif kind == 4:
		dt1 = Phenomena(T, p, kind, correct)   # 逆→留
		dt2 = Phenomena(T, p, kind+1, correct) # 顺→留
		JDE1 = JDE0 + dt1
		JDE2 = JDE0 + dt2
		return td2date(JDE1), td2date(JDE2)

def InferiorConjunct(Y, p, type=0): # 下合/合精确计算
	if p in ['水', '金']:  # 0：下合；1：上合
		JDE = pp(Y, p, type)
	else:  # 外行星合日
		JDE = pp(Y, p, 1)
	JD1 = JDE
	while True:
		JD0 = JD1
		pL = PlanetLBR(p, JD0)[0]
		sL = sunLBR(JD0)[0]
		L0 = pL - sL # - angle
		L0p = ((PlanetLBR(p, JD0+0.000005)[0]-sunLBR(JD0+0.000005)[0]) - (PlanetLBR(p, JD0-0.000005)[0]-sunLBR(JD0-0.000005)[0])) / 0.00001
		JD1 = JD0 - L0/L0p
		if abs(JD1 - JD0) <= 0.000001:  # 会合经度范围
			break
	return td2date(JD1)


def pp_ip(p, n0, t2, angle): # 插值计算行星在黄经差为angle时的时间，t为JDE时间
	t1 = t2 + 5
	t3 = t2 - 5
	L1 = (PlanetLBR(p, t1)[0] - sunLBR(t1)[0]) + angle
	L2 = (PlanetLBR(p, t2)[0] - sunLBR(t2)[0]) + angle
	L3 = (PlanetLBR(p, t3)[0] - sunLBR(t3)[0]) + angle
	if L1 > L2: L1 -= 360
	if L2 > L3: L3 += 360
	a = L2 - L1
	b = L3 - L2
	c = L1 + L3 - 2 * L2
	n = -2 * L2 / (a + b + c*n0)
	return n, t1

def pp_it(Y, p, angle): # 精确计算相对位置为angle的时间
	if angle == 180: # 上合/冲
		if p in ['水', '金']:
			t2 = pp(Y, p, 1)  # 上合
			if PlanetLBR(p, t2)[0] < sunLBR(t2)[0]: angle = -angle
		else: # 冲
			t2 = pp(Y, p, 0)
			if PlanetLBR(p, t2)[0] > sunLBR(t2)[0]: angle = -angle
	else: t2 = pp(Y, p, 1) # 从上合/合起算
	n0 = 0 # 初值
	i = 0
	while True:
		n, t1 = pp_ip(p, n0, t2, angle)
		if abs(n0 - n) < 0.000001: break
		n0 = n # - (2*L2+n*(a+b+c*n)) / (a+b+2*c*n)
		i += 1
		if i == 100: break # 超出计算机精度处理范围
	JDE = t2 + n * (t2 - t1)
	return JDE #,PlanetLBR(p, t2)[0], sunLBR(t2)[0]

def HeliacalRiseSet(Y, p ,type=0): # 去日15度，木金13度
	if p in ['金', '木']:
		angle = 13
	else:
		angle = 15
	if type == 0:  # 晨见，在日西
		JDE = pp_it(Y, p, angle)
	elif type == 1:  # 夕见，在日东
		JDE = pp_it(Y, p, -angle)
	return JDE, PlanetLBR(p, JDE)[0], sunLBR(JDE)[0]




##########   行星会合（未使用）   ##########

def differAngle(p1, p2, JDE):
	L = PlanetLBR(p1, JDE)[0] - PlanetLBR(p2, JDE)[0]
	return deg2pi(L)

def ipTable(p1, p2, angle, t2): # 行星在angle内的会合（估算，用于插值）
	t1 = t2 + 500 # 木火100
	t3 = t2 - 500
	if angle < 0:
		L1 = (PlanetLBR(p1, t1)[0] - PlanetLBR(p2, t1)[0]) + angle / 2
		L2 = (PlanetLBR(p1, t2)[0] - PlanetLBR(p2, t2)[0]) + angle / 2
		L3 = (PlanetLBR(p1, t3)[0] - PlanetLBR(p2, t3)[0]) + angle / 2
	else:
		L1 = (PlanetLBR(p1, t1)[0] - PlanetLBR(p2, t1)[0]) + angle / 2
		L2 = (PlanetLBR(p1, t2)[0] - PlanetLBR(p2, t2)[0]) + angle / 2
		L3 = (PlanetLBR(p1, t3)[0] - PlanetLBR(p2, t3)[0]) + angle / 2
	if L1 > L2 and L2 < 0 and L1 > 0: L1 -= 360
	if L2 > L3 and L3 < 0 and L2 > 0: L3 += 360
	return L1, L2, L3, t1  # 从小到大排序

def pcpIP(p1, p2, v, angle, t2): # 行星在angle内的会合（插值估算，用于迭代）
	if angle < 0:
		while True:
			t2 -= (PlanetLBR(p2, t2)[0] - PlanetLBR(p1, t2)[0] + angle / 2) / v
			L1, L2, L3, t1 = ipTable(p1, p2, angle, t2)
			if L1 <= L2 <= L3: break
	else:
		while True:
			t2 += (PlanetLBR(p1, t2)[0] - PlanetLBR(p2, t2)[0] + angle / 2) / v
			L1, L2, L3, t1 = ipTable(p1, p2, angle, t2)
			if L1 <= L2 <= L3: break
	a = L2 - L1
	b = L3 - L2
	c = L1 + L3 - 2 * L2
	n0 = 0 # 初值
	i = 0
	while True:
		n = -2 * L2 / (a + b + c * n0)
		if abs(n0 - n) < 0.000001: break
		n0 = n
		i += 1
		if i == 100 : break # 异常
	JDE = t2 + n * (t2 - t1)
	return JDE

def pcpIT(p1, p2, angle, JDE): # 行星在angle内的会合（迭代）
	JD1 = JDE
	i = 0
	while True:
		JD0 = JD1
		if angle < 0:
			pL = PlanetLBR(p1, JD0)[0] - PlanetLBR(p2, JD0)[0]
			L0 = pL + angle / 2
			L0p = ((PlanetLBR(p1, JD0+0.000005)[0]-PlanetLBR(p2, JD0+0.000005)[0]) - (PlanetLBR(p1, JD0-0.000005)[0]-PlanetLBR(p2, JD0-0.000005)[0])) / 0.00001
		else:
			pL = PlanetLBR(p2, JD0)[0] - PlanetLBR(p1, JD0)[0]
			L0 = pL - angle / 2
			L0p = ((PlanetLBR(p2, JD0 + 0.000005)[0] - PlanetLBR(p1, JD0 + 0.000005)[0]) - (PlanetLBR(p2, JD0 - 0.000005)[0] - PlanetLBR(p1, JD0 - 0.000005)[0])) / 0.00001
		JD1 = JD0 - L0 / L0p
		i += 1
		if abs(L0) <= 0.000001 or i == 10:
			break
	return td2date(JD0), i

def planetConjunct(date, angle, p1, p2): # p2超p1
	t = date2JD(date) # 会合周期较长，默认date即为JDE
	sp = 1 / (1 / SiderealPeriod[p2] - 1 / SiderealPeriod[p1]) # 会合周期
	v = 360 / sp # 相对速度：度/日
	t1, i = pcpIT(p1, p2, -angle, t)
	while i == 10:
		t -= 365.25
		t1 = pcpIP(p1, p2, v, -angle, t) # 会合后，p1在p2前angle/2度
		t1, i = pcpIT(p1, p2, -angle, t1)
	t2 = pcpIP(p1, p2, v, angle, t)
	t2 = pcpIT(p1, p2, angle, t2)[0]
	return t1, t2#td2date(t1), td2date(t2)

